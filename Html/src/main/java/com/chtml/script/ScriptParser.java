
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.chtml.script;

import java_cup.runtime.Symbol;
import com.chtml.error.*;
import java.util.ArrayList;
import java.util.List;
import com.chtml.code.*;
import com.chtml.tag.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ScriptParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return ScriptSym.class;
}

  /** Default constructor. */
  @Deprecated
  public ScriptParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ScriptParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ScriptParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\220\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\003\004\000" +
    "\002\007\004\000\002\007\004\000\002\004\004\000\002" +
    "\004\002\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\006\004\000\002\006\004\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\010\004\000" +
    "\002\010\004\000\002\010\003\000\002\010\003\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\004\000\002\011\004\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\003\000\002\014\005\000\002\014\005\000\002\014\005" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\014\003\000\002\014\004\000\002\014\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\014\003" +
    "\000\002\020\004\000\002\020\003\000\002\022\004\000" +
    "\002\021\005\000\002\021\002\000\002\023\005\000\002" +
    "\023\004\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\024\003" +
    "\000\002\025\004\000\002\025\004\000\002\025\002\000" +
    "\002\015\006\000\002\015\006\000\002\015\006\000\002" +
    "\015\006\000\002\026\005\000\002\030\004\000\002\030" +
    "\002\000\002\032\004\000\002\032\002\000\002\031\011" +
    "\000\002\031\011\000\002\031\011\000\002\031\011\000" +
    "\002\031\011\000\002\027\010\000\002\027\010\000\002" +
    "\027\010\000\002\027\010\000\002\013\005\000\002\013" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\005" +
    "\000\002\013\005\000\002\013\003\000\002\012\005\000" +
    "\002\012\005\000\002\012\004\000\002\012\005\000\002" +
    "\012\003\000\002\034\010\000\002\034\010\000\002\034" +
    "\010\000\002\034\010\000\002\034\010\000\002\034\010" +
    "\000\002\034\003\000\002\035\010\000\002\035\010\000" +
    "\002\035\010\000\002\035\010\000\002\035\010\000\002" +
    "\035\010\000\002\035\003\000\002\036\007\000\002\036" +
    "\007\000\002\036\007\000\002\041\007\000\002\041\007" +
    "\000\002\041\007\000\002\041\007\000\002\037\010\000" +
    "\002\037\010\000\002\037\010\000\002\037\010\000\002" +
    "\016\006\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\005\000\002\016\005" +
    "\000\002\040\007\000\002\040\006\000\002\040\007\000" +
    "\002\040\006\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u014a\000\012\002\ufff5\003\005\021\007\075\010\001" +
    "\002\000\006\003\032\063\030\001\002\000\004\065\026" +
    "\001\002\000\004\002\025\001\002\000\006\003\020\065" +
    "\021\001\002\000\006\003\013\065\014\001\002\000\012" +
    "\002\ufff5\003\005\021\007\075\010\001\002\000\004\002" +
    "\ufff6\001\002\000\004\066\017\001\002\000\006\003\015" +
    "\066\016\001\002\000\006\003\ufffc\063\ufffc\001\002\000" +
    "\006\003\000\063\000\001\002\000\006\003\ufffd\063\ufffd" +
    "\001\002\000\004\066\024\001\002\000\006\003\022\066" +
    "\023\001\002\000\006\003\ufffa\063\ufffa\001\002\000\006" +
    "\003\uffff\063\uffff\001\002\000\006\003\ufffb\063\ufffb\001" +
    "\002\000\004\002\001\001\002\000\004\066\027\001\002" +
    "\000\006\003\ufffe\063\ufffe\001\002\000\042\003\056\006" +
    "\042\011\064\013\046\014\040\046\061\047\033\050\062" +
    "\051\036\052\044\053\035\054\045\064\034\073\063\076" +
    "\057\077\050\001\002\000\012\002\ufff9\003\ufff9\021\ufff9" +
    "\075\ufff9\001\002\000\042\003\056\006\042\011\064\013" +
    "\046\014\040\046\061\047\033\050\062\051\036\052\044" +
    "\053\035\054\045\064\034\073\063\076\057\077\050\001" +
    "\002\000\004\065\u0149\001\002\000\012\002\uffed\003\uffed" +
    "\021\uffed\075\uffed\001\002\000\006\073\uffbc\076\uffbc\001" +
    "\002\000\006\073\uffbf\076\uffbf\001\002\000\006\073\063" +
    "\076\057\001\002\000\006\003\u0138\065\u0139\001\002\000" +
    "\042\003\056\006\042\011\064\013\046\014\040\046\061" +
    "\047\033\050\062\051\036\052\044\053\035\054\045\064" +
    "\034\073\063\076\057\077\050\001\002\000\006\003\u0128" +
    "\065\u0129\001\002\000\042\003\056\006\042\011\064\013" +
    "\046\014\040\046\061\047\033\050\062\051\036\052\044" +
    "\053\035\054\045\064\034\073\063\076\057\077\050\001" +
    "\002\000\006\073\uffbe\076\uffbe\001\002\000\006\073\uffbd" +
    "\076\uffbd\001\002\000\004\065\u011f\001\002\000\012\002" +
    "\ufff8\003\ufff8\021\ufff8\075\ufff8\001\002\000\004\065\u011c" +
    "\001\002\000\042\003\056\006\042\011\064\013\046\014" +
    "\040\046\061\047\033\050\062\051\036\052\044\053\035" +
    "\054\045\064\034\073\063\076\057\077\050\001\002\000" +
    "\042\003\056\006\042\011\064\013\046\014\040\046\061" +
    "\047\033\050\062\051\036\052\044\053\035\054\045\064" +
    "\034\073\063\076\057\077\050\001\002\000\006\003\u0116" +
    "\056\u0117\001\002\000\012\003\uffb8\055\u0108\056\uffb8\066" +
    "\uffb8\001\002\000\012\003\uffc6\055\uffc6\056\uffc6\066\uffc6" +
    "\001\002\000\042\003\056\006\042\011\064\013\046\014" +
    "\040\046\061\047\033\050\062\051\036\052\044\053\035" +
    "\054\045\064\034\073\063\076\057\077\050\001\002\000" +
    "\004\073\063\001\002\000\046\003\uffb1\006\uffb1\010\uffb1" +
    "\011\uffb1\013\uffb1\014\uffb1\046\uffb1\047\uffb1\050\uffb1\051" +
    "\uffb1\052\uffb1\053\uffb1\054\uffb1\057\uffb1\064\uffb1\073\uffb1" +
    "\076\uffb1\077\uffb1\001\002\000\004\065\262\001\002\000" +
    "\006\073\uffc0\076\uffc0\001\002\000\014\003\uffc3\055\uffc3" +
    "\056\uffc3\060\256\066\uffc3\001\002\000\006\003\065\065" +
    "\066\001\002\000\020\050\062\051\036\052\044\053\035" +
    "\054\045\073\063\076\057\001\002\000\020\050\062\051" +
    "\036\052\044\053\035\054\045\073\063\076\057\001\002" +
    "\000\006\003\070\066\071\001\002\000\006\003\072\012" +
    "\073\001\002\000\006\003\072\012\073\001\002\000\004" +
    "\065\246\001\002\000\006\003\075\065\076\001\002\000" +
    "\046\003\uff8b\006\uff8b\010\uff8b\011\uff8b\013\uff8b\014\uff8b" +
    "\046\uff8b\047\uff8b\050\uff8b\051\uff8b\052\uff8b\053\uff8b\054" +
    "\uff8b\057\uff8b\064\uff8b\073\uff8b\076\uff8b\077\uff8b\001\002" +
    "\000\044\003\113\016\104\017\112\020\107\034\121\037" +
    "\114\040\101\041\106\042\077\043\120\044\115\045\111" +
    "\051\103\065\100\067\110\070\102\073\117\001\002\000" +
    "\044\003\113\016\104\017\112\020\107\034\121\037\114" +
    "\040\101\041\106\042\077\043\120\044\115\045\111\051" +
    "\103\065\100\067\110\070\102\073\117\001\002\000\004" +
    "\065\240\001\002\000\044\003\113\016\104\017\112\020" +
    "\107\034\121\037\114\040\101\041\106\042\077\043\120" +
    "\044\115\045\111\051\103\065\100\067\110\070\102\073" +
    "\117\001\002\000\004\065\233\001\002\000\040\003\uffcd" +
    "\022\uffcd\023\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd\036\uffcd\056\uffcd" +
    "\066\uffcd\001\002\000\040\003\uffd1\022\uffd1\023\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\uffd1\056\uffd1\066\uffd1\001\002\000" +
    "\040\003\uffcc\022\uffcc\023\uffcc\025\uffcc\026\uffcc\027\uffcc" +
    "\030\uffcc\031\uffcc\032\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\056\uffcc\066\uffcc\001\002\000\016\003\151\033\130" +
    "\034\126\035\132\036\127\066\152\001\002\000\004\065" +
    "\146\001\002\000\040\003\uffce\022\uffce\023\uffce\025\uffce" +
    "\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce\033\uffce\034" +
    "\uffce\035\uffce\036\uffce\056\uffce\066\uffce\001\002\000\040" +
    "\003\uffd2\022\uffd2\023\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2" +
    "\056\uffd2\066\uffd2\001\002\000\004\065\144\001\002\000" +
    "\040\003\uffcb\022\uffcb\023\uffcb\025\uffcb\026\uffcb\027\uffcb" +
    "\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036" +
    "\uffcb\056\uffcb\066\uffcb\001\002\000\040\003\uffc8\022\uffc8" +
    "\023\uffc8\025\uffc8\026\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\056\uffc8\066\uffc8" +
    "\001\002\000\004\065\141\001\002\000\004\065\137\001" +
    "\002\000\040\003\uffc9\022\uffc9\023\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035" +
    "\uffc9\036\uffc9\056\uffc9\066\uffc9\001\002\000\040\003\uffca" +
    "\022\uffca\023\uffca\025\uffca\026\uffca\027\uffca\030\uffca\031" +
    "\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\056\uffca" +
    "\066\uffca\001\002\000\004\065\124\001\002\000\006\051" +
    "\123\067\122\001\002\000\040\003\uffd0\022\uffd0\023\uffd0" +
    "\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\056\uffd0\066\uffd0\001\002" +
    "\000\040\003\uffcf\022\uffcf\023\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\036\uffcf\056\uffcf\066\uffcf\001\002\000\044\003\113\016" +
    "\104\017\112\020\107\034\121\037\114\040\101\041\106" +
    "\042\077\043\120\044\115\045\111\051\103\065\100\067" +
    "\110\070\102\073\117\001\002\000\014\033\130\034\126" +
    "\035\132\036\127\066\131\001\002\000\044\003\113\016" +
    "\104\017\112\020\107\034\121\037\114\040\101\041\106" +
    "\042\077\043\120\044\115\045\111\051\103\065\100\067" +
    "\110\070\102\073\117\001\002\000\044\003\113\016\104" +
    "\017\112\020\107\034\121\037\114\040\101\041\106\042" +
    "\077\043\120\044\115\045\111\051\103\065\100\067\110" +
    "\070\102\073\117\001\002\000\044\003\113\016\104\017" +
    "\112\020\107\034\121\037\114\040\101\041\106\042\077" +
    "\043\120\044\115\045\111\051\103\065\100\067\110\070" +
    "\102\073\117\001\002\000\040\003\uff7c\022\uff7c\023\uff7c" +
    "\025\uff7c\026\uff7c\027\uff7c\030\uff7c\031\uff7c\032\uff7c\033" +
    "\uff7c\034\uff7c\035\uff7c\036\uff7c\056\uff7c\066\uff7c\001\002" +
    "\000\044\003\113\016\104\017\112\020\107\034\121\037" +
    "\114\040\101\041\106\042\077\043\120\044\115\045\111" +
    "\051\103\065\100\067\110\070\102\073\117\001\002\000" +
    "\040\003\uffd5\022\uffd5\023\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\035\uffd5\036" +
    "\uffd5\056\uffd5\066\uffd5\001\002\000\040\003\uffd7\022\uffd7" +
    "\023\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\035\132\036\127\056\uffd7\066\uffd7" +
    "\001\002\000\040\003\uffd4\022\uffd4\023\uffd4\025\uffd4\026" +
    "\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\056\uffd4\066\uffd4\001\002\000\040\003" +
    "\uffd6\022\uffd6\023\uffd6\025\uffd6\026\uffd6\027\uffd6\030\uffd6" +
    "\031\uffd6\032\uffd6\033\uffd6\034\uffd6\035\132\036\127\056" +
    "\uffd6\066\uffd6\001\002\000\004\066\140\001\002\000\040" +
    "\003\uff7b\022\uff7b\023\uff7b\025\uff7b\026\uff7b\027\uff7b\030" +
    "\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b\035\uff7b\036\uff7b" +
    "\056\uff7b\066\uff7b\001\002\000\044\003\113\016\104\017" +
    "\112\020\107\034\121\037\114\040\101\041\106\042\077" +
    "\043\120\044\115\045\111\051\103\065\100\067\110\070" +
    "\102\073\117\001\002\000\014\033\130\034\126\035\132" +
    "\036\127\066\143\001\002\000\040\003\uff80\022\uff80\023" +
    "\uff80\025\uff80\026\uff80\027\uff80\030\uff80\031\uff80\032\uff80" +
    "\033\uff80\034\uff80\035\uff80\036\uff80\056\uff80\066\uff80\001" +
    "\002\000\004\066\145\001\002\000\040\003\uff7a\022\uff7a" +
    "\023\uff7a\025\uff7a\026\uff7a\027\uff7a\030\uff7a\031\uff7a\032" +
    "\uff7a\033\uff7a\034\uff7a\035\uff7a\036\uff7a\056\uff7a\066\uff7a" +
    "\001\002\000\044\003\113\016\104\017\112\020\107\034" +
    "\121\037\114\040\101\041\106\042\077\043\120\044\115" +
    "\045\111\051\103\065\100\067\110\070\102\073\117\001" +
    "\002\000\014\033\130\034\126\035\132\036\127\066\150" +
    "\001\002\000\040\003\uff7e\022\uff7e\023\uff7e\025\uff7e\026" +
    "\uff7e\027\uff7e\030\uff7e\031\uff7e\032\uff7e\033\uff7e\034\uff7e" +
    "\035\uff7e\036\uff7e\056\uff7e\066\uff7e\001\002\000\042\003" +
    "\163\004\153\006\042\011\064\013\046\014\040\046\061" +
    "\047\033\050\062\051\036\052\044\053\035\054\045\073" +
    "\063\076\057\077\050\001\002\000\042\003\163\004\153" +
    "\006\042\011\064\013\046\014\040\046\061\047\033\050" +
    "\062\051\036\052\044\053\035\054\045\073\063\076\057" +
    "\077\050\001\002\000\006\003\167\061\166\001\002\000" +
    "\046\003\uffe7\006\uffe7\010\uffe7\011\uffe7\013\uffe7\014\uffe7" +
    "\046\uffe7\047\uffe7\050\uffe7\051\uffe7\052\uffe7\053\uffe7\054" +
    "\uffe7\057\uffe7\064\uffe7\073\uffe7\076\uffe7\077\uffe7\001\002" +
    "\000\046\003\uff88\006\uff88\010\uff88\011\uff88\013\uff88\014" +
    "\uff88\046\uff88\047\uff88\050\uff88\051\uff88\052\uff88\053\uff88" +
    "\054\uff88\057\uff88\064\uff88\073\uff88\076\uff88\077\uff88\001" +
    "\002\000\046\003\uffea\006\uffea\010\uffea\011\uffea\013\uffea" +
    "\014\uffea\046\uffea\047\uffea\050\uffea\051\uffea\052\uffea\053" +
    "\uffea\054\uffea\057\uffea\064\uffea\073\uffea\076\uffea\077\uffea" +
    "\001\002\000\046\003\uff93\006\uff93\010\uff93\011\uff93\013" +
    "\uff93\014\uff93\046\uff93\047\uff93\050\uff93\051\uff93\052\uff93" +
    "\053\uff93\054\uff93\057\uff93\064\uff93\073\uff93\076\uff93\077" +
    "\uff93\001\002\000\046\003\uffe9\006\uffe9\010\uffe9\011\uffe9" +
    "\013\uffe9\014\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\052" +
    "\uffe9\053\uffe9\054\uffe9\057\uffe9\064\uffe9\073\uffe9\076\uffe9" +
    "\077\uffe9\001\002\000\046\003\uffe8\006\uffe8\010\uffe8\011" +
    "\uffe8\013\uffe8\014\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8" +
    "\052\uffe8\053\uffe8\054\uffe8\057\uffe8\064\uffe8\073\uffe8\076" +
    "\uffe8\077\uffe8\001\002\000\006\003\164\056\165\001\002" +
    "\000\046\003\uffe6\006\uffe6\010\uffe6\011\uffe6\013\uffe6\014" +
    "\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6\053\uffe6" +
    "\054\uffe6\057\uffe6\064\uffe6\073\uffe6\076\uffe6\077\uffe6\001" +
    "\002\000\046\003\uffec\006\uffec\010\uffec\011\uffec\013\uffec" +
    "\014\uffec\046\uffec\047\uffec\050\uffec\051\uffec\052\uffec\053" +
    "\uffec\054\uffec\057\uffec\064\uffec\073\uffec\076\uffec\077\uffec" +
    "\001\002\000\046\003\uffeb\006\uffeb\010\uffeb\011\uffeb\013" +
    "\uffeb\014\uffeb\046\uffeb\047\uffeb\050\uffeb\051\uffeb\052\uffeb" +
    "\053\uffeb\054\uffeb\057\uffeb\064\uffeb\073\uffeb\076\uffeb\077" +
    "\uffeb\001\002\000\006\003\215\057\214\001\002\000\004" +
    "\057\170\001\002\000\042\003\200\006\042\011\064\013" +
    "\046\014\040\046\061\047\033\050\062\051\036\052\044" +
    "\053\035\054\045\057\171\073\063\076\057\077\050\001" +
    "\002\000\006\003\uffd8\062\uffd8\001\002\000\004\062\212" +
    "\001\002\000\042\003\200\006\042\011\064\013\046\014" +
    "\040\046\061\047\033\050\062\051\036\052\044\053\035" +
    "\054\045\057\171\073\063\076\057\077\050\001\002\000" +
    "\042\003\200\006\042\011\064\013\046\014\040\046\061" +
    "\047\033\050\062\051\036\052\044\053\035\054\045\057" +
    "\171\073\063\076\057\077\050\001\002\000\042\003\200" +
    "\006\042\011\064\013\046\014\040\046\061\047\033\050" +
    "\062\051\036\052\044\053\035\054\045\057\171\073\063" +
    "\076\057\077\050\001\002\000\042\003\200\006\042\011" +
    "\064\013\046\014\040\046\061\047\033\050\062\051\036" +
    "\052\044\053\035\054\045\057\171\073\063\076\057\077" +
    "\050\001\002\000\006\003\202\056\203\001\002\000\042" +
    "\003\200\006\042\011\064\013\046\014\040\046\061\047" +
    "\033\050\062\051\036\052\044\053\035\054\045\057\171" +
    "\073\063\076\057\077\050\001\002\000\006\003\uffd9\062" +
    "\uffd9\001\002\000\042\003\200\006\042\011\064\013\046" +
    "\014\040\046\061\047\033\050\062\051\036\052\044\053" +
    "\035\054\045\057\171\073\063\076\057\077\050\001\002" +
    "\000\042\003\200\006\042\011\064\013\046\014\040\046" +
    "\061\047\033\050\062\051\036\052\044\053\035\054\045" +
    "\057\171\073\063\076\057\077\050\001\002\000\006\003" +
    "\uffde\062\uffde\001\002\000\006\003\uffdf\062\uffdf\001\002" +
    "\000\006\003\uffdb\062\uffdb\001\002\000\006\003\uffdd\062" +
    "\uffdd\001\002\000\006\003\uffdc\062\uffdc\001\002\000\006" +
    "\003\uffda\062\uffda\001\002\000\004\005\213\001\002\000" +
    "\046\003\uff98\006\uff98\010\uff98\011\uff98\013\uff98\014\uff98" +
    "\046\uff98\047\uff98\050\uff98\051\uff98\052\uff98\053\uff98\054" +
    "\uff98\057\uff98\064\uff98\073\uff98\076\uff98\077\uff98\001\002" +
    "\000\042\003\222\006\042\011\064\013\046\014\040\046" +
    "\061\047\033\050\062\051\036\052\044\053\035\054\045" +
    "\057\171\073\063\076\057\077\050\001\002\000\042\003" +
    "\200\006\042\011\064\013\046\014\040\046\061\047\033" +
    "\050\062\051\036\052\044\053\035\054\045\057\171\073" +
    "\063\076\057\077\050\001\002\000\004\062\217\001\002" +
    "\000\004\005\220\001\002\000\046\003\uff97\006\uff97\010" +
    "\uff97\011\uff97\013\uff97\014\uff97\046\uff97\047\uff97\050\uff97" +
    "\051\uff97\052\uff97\053\uff97\054\uff97\057\uff97\064\uff97\073" +
    "\uff97\076\uff97\077\uff97\001\002\000\006\003\225\062\226" +
    "\001\002\000\044\003\200\006\042\011\064\013\046\014" +
    "\040\046\061\047\033\050\062\051\036\052\044\053\035" +
    "\054\045\057\171\062\223\073\063\076\057\077\050\001" +
    "\002\000\004\005\224\001\002\000\046\003\uff96\006\uff96" +
    "\010\uff96\011\uff96\013\uff96\014\uff96\046\uff96\047\uff96\050" +
    "\uff96\051\uff96\052\uff96\053\uff96\054\uff96\057\uff96\064\uff96" +
    "\073\uff96\076\uff96\077\uff96\001\002\000\004\005\231\001" +
    "\002\000\006\003\227\005\230\001\002\000\046\003\uff94" +
    "\006\uff94\010\uff94\011\uff94\013\uff94\014\uff94\046\uff94\047" +
    "\uff94\050\uff94\051\uff94\052\uff94\053\uff94\054\uff94\057\uff94" +
    "\064\uff94\073\uff94\076\uff94\077\uff94\001\002\000\046\003" +
    "\uff99\006\uff99\010\uff99\011\uff99\013\uff99\014\uff99\046\uff99" +
    "\047\uff99\050\uff99\051\uff99\052\uff99\053\uff99\054\uff99\057" +
    "\uff99\064\uff99\073\uff99\076\uff99\077\uff99\001\002\000\046" +
    "\003\uff95\006\uff95\010\uff95\011\uff95\013\uff95\014\uff95\046" +
    "\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053\uff95\054\uff95" +
    "\057\uff95\064\uff95\073\uff95\076\uff95\077\uff95\001\002\000" +
    "\046\003\uff85\006\uff85\010\uff85\011\uff85\013\uff85\014\uff85" +
    "\046\uff85\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054" +
    "\uff85\057\uff85\064\uff85\073\uff85\076\uff85\077\uff85\001\002" +
    "\000\044\003\113\016\104\017\112\020\107\034\121\037" +
    "\114\040\101\041\106\042\077\043\120\044\115\045\111" +
    "\051\103\065\100\067\110\070\102\073\117\001\002\000" +
    "\014\033\130\034\126\035\132\036\127\066\235\001\002" +
    "\000\040\003\uff7f\022\uff7f\023\uff7f\025\uff7f\026\uff7f\027" +
    "\uff7f\030\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f\035\uff7f" +
    "\036\uff7f\056\uff7f\066\uff7f\001\002\000\014\033\130\034" +
    "\126\035\132\036\127\066\237\001\002\000\040\003\uffd3" +
    "\022\uffd3\023\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031" +
    "\uffd3\032\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\056\uffd3" +
    "\066\uffd3\001\002\000\044\003\113\016\104\017\112\020" +
    "\107\034\121\037\114\040\101\041\106\042\077\043\120" +
    "\044\115\045\111\051\103\065\100\067\110\070\102\073" +
    "\117\001\002\000\014\033\130\034\126\035\132\036\127" +
    "\066\242\001\002\000\040\003\uff7d\022\uff7d\023\uff7d\025" +
    "\uff7d\026\uff7d\027\uff7d\030\uff7d\031\uff7d\032\uff7d\033\uff7d" +
    "\034\uff7d\035\uff7d\036\uff7d\056\uff7d\066\uff7d\001\002\000" +
    "\014\033\130\034\126\035\132\036\127\066\244\001\002" +
    "\000\042\003\163\004\153\006\042\011\064\013\046\014" +
    "\040\046\061\047\033\050\062\051\036\052\044\053\035" +
    "\054\045\073\063\076\057\077\050\001\002\000\046\003" +
    "\uff86\006\uff86\010\uff86\011\uff86\013\uff86\014\uff86\046\uff86" +
    "\047\uff86\050\uff86\051\uff86\052\uff86\053\uff86\054\uff86\057" +
    "\uff86\064\uff86\073\uff86\076\uff86\077\uff86\001\002\000\044" +
    "\003\113\016\104\017\112\020\107\034\121\037\114\040" +
    "\101\041\106\042\077\043\120\044\115\045\111\051\103" +
    "\065\100\067\110\070\102\073\117\001\002\000\014\033" +
    "\130\034\126\035\132\036\127\066\250\001\002\000\042" +
    "\003\163\004\153\006\042\011\064\013\046\014\040\046" +
    "\061\047\033\050\062\051\036\052\044\053\035\054\045" +
    "\073\063\076\057\077\050\001\002\000\046\003\uff87\006" +
    "\uff87\010\uff87\011\uff87\013\uff87\014\uff87\046\uff87\047\uff87" +
    "\050\uff87\051\uff87\052\uff87\053\uff87\054\uff87\057\uff87\064" +
    "\uff87\073\uff87\076\uff87\077\uff87\001\002\000\046\003\uff89" +
    "\006\uff89\010\uff89\011\uff89\013\uff89\014\uff89\046\uff89\047" +
    "\uff89\050\uff89\051\uff89\052\uff89\053\uff89\054\uff89\057\uff89" +
    "\064\uff89\073\uff89\076\uff89\077\uff89\001\002\000\004\066" +
    "\254\001\002\000\006\003\072\012\073\001\002\000\046" +
    "\003\uff8a\006\uff8a\010\uff8a\011\uff8a\013\uff8a\014\uff8a\046" +
    "\uff8a\047\uff8a\050\uff8a\051\uff8a\052\uff8a\053\uff8a\054\uff8a" +
    "\057\uff8a\064\uff8a\073\uff8a\076\uff8a\077\uff8a\001\002\000" +
    "\004\073\260\001\002\000\012\003\uffc5\055\uffc5\056\uffc5" +
    "\066\uffc5\001\002\000\014\003\uffc3\055\uffc3\056\uffc3\060" +
    "\256\066\uffc3\001\002\000\012\003\uffc4\055\uffc4\056\uffc4" +
    "\066\uffc4\001\002\000\044\003\113\016\104\017\112\020" +
    "\107\034\121\037\114\040\101\041\106\042\077\043\120" +
    "\044\115\045\111\051\103\065\100\067\110\070\102\073" +
    "\117\001\002\000\014\033\130\034\126\035\132\036\127" +
    "\066\264\001\002\000\004\056\265\001\002\000\046\003" +
    "\uff79\006\uff79\010\uff79\011\uff79\013\uff79\014\uff79\046\uff79" +
    "\047\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\057" +
    "\uff79\064\uff79\073\uff79\076\uff79\077\uff79\001\002\000\046" +
    "\003\uffaf\006\uffaf\010\267\011\uffaf\013\uffaf\014\uffaf\046" +
    "\uffaf\047\uffaf\050\uffaf\051\uffaf\052\uffaf\053\uffaf\054\uffaf" +
    "\057\uffaf\064\uffaf\073\uffaf\076\uffaf\077\uffaf\001\002\000" +
    "\042\003\301\004\272\006\274\011\064\013\046\014\040" +
    "\046\061\047\033\050\062\051\036\052\044\053\035\054" +
    "\045\073\063\076\057\077\050\001\002\000\046\003\uffb2" +
    "\006\uffb2\010\uffb2\011\uffb2\013\uffb2\014\uffb2\046\uffb2\047" +
    "\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2\054\uffb2\057\uffb2" +
    "\064\uffb2\073\uffb2\076\uffb2\077\uffb2\001\002\000\046\003" +
    "\uffb3\006\uffb3\010\uffb3\011\uffb3\013\uffb3\014\uffb3\046\uffb3" +
    "\047\uffb3\050\uffb3\051\uffb3\052\uffb3\053\uffb3\054\uffb3\057" +
    "\uffb3\064\uffb3\073\uffb3\076\uffb3\077\uffb3\001\002\000\006" +
    "\003\362\061\361\001\002\000\046\003\uffe1\006\uffe1\010" +
    "\uffe1\011\uffe1\013\uffe1\014\uffe1\046\uffe1\047\uffe1\050\uffe1" +
    "\051\uffe1\052\uffe1\053\uffe1\054\uffe1\057\uffe1\064\uffe1\073" +
    "\uffe1\076\uffe1\077\uffe1\001\002\000\006\003\342\065\343" +
    "\001\002\000\046\003\uffe3\006\uffe3\010\uffe3\011\uffe3\013" +
    "\uffe3\014\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3" +
    "\053\uffe3\054\uffe3\057\uffe3\064\uffe3\073\uffe3\076\uffe3\077" +
    "\uffe3\001\002\000\046\003\uffe2\006\uffe2\010\uffe2\011\uffe2" +
    "\013\uffe2\014\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052" +
    "\uffe2\053\uffe2\054\uffe2\057\uffe2\064\uffe2\073\uffe2\076\uffe2" +
    "\077\uffe2\001\002\000\006\003\340\056\341\001\002\000" +
    "\046\003\uffb0\006\uffb0\010\uffb0\011\uffb0\013\uffb0\014\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\057\uffb0\064\uffb0\073\uffb0\076\uffb0\077\uffb0\001\002" +
    "\000\050\003\uffe0\006\uffe0\010\uffe0\011\uffe0\013\uffe0\014" +
    "\uffe0\046\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\053\uffe0" +
    "\054\uffe0\057\uffe0\064\uffe0\065\303\073\uffe0\076\uffe0\077" +
    "\uffe0\001\002\000\046\003\uff8c\006\uff8c\010\uff8c\011\uff8c" +
    "\013\uff8c\014\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\052" +
    "\uff8c\053\uff8c\054\uff8c\057\uff8c\064\uff8c\073\uff8c\076\uff8c" +
    "\077\uff8c\001\002\000\046\003\113\016\104\017\112\020" +
    "\107\024\305\034\121\037\114\040\101\041\106\042\077" +
    "\043\120\044\115\045\111\051\103\065\304\067\110\070" +
    "\102\073\117\001\002\000\046\003\113\016\104\017\112" +
    "\020\107\024\305\034\121\037\114\040\101\041\106\042" +
    "\077\043\120\044\115\045\111\051\103\065\304\067\110" +
    "\070\102\073\117\001\002\000\046\003\113\016\104\017" +
    "\112\020\107\024\305\034\121\037\114\040\101\041\106" +
    "\042\077\043\120\044\115\045\111\051\103\065\304\067" +
    "\110\070\102\073\117\001\002\000\014\003\uff9a\022\uff9a" +
    "\023\uff9a\056\uff9a\066\uff9a\001\002\000\040\003\uff9f\022" +
    "\uff9f\023\uff9f\025\324\026\321\027\325\030\322\031\323" +
    "\032\320\033\130\034\126\035\132\036\127\056\uff9f\066" +
    "\uff9f\001\002\000\010\022\313\023\311\066\312\001\002" +
    "\000\046\003\113\016\104\017\112\020\107\024\305\034" +
    "\121\037\114\040\101\041\106\042\077\043\120\044\115" +
    "\045\111\051\103\065\304\067\110\070\102\073\117\001" +
    "\002\000\004\007\315\001\002\000\046\003\113\016\104" +
    "\017\112\020\107\024\305\034\121\037\114\040\101\041" +
    "\106\042\077\043\120\044\115\045\111\051\103\065\304" +
    "\067\110\070\102\073\117\001\002\000\014\003\uff9d\022" +
    "\uff9d\023\311\056\uff9d\066\uff9d\001\002\000\042\003\163" +
    "\004\153\006\042\011\064\013\046\014\040\046\061\047" +
    "\033\050\062\051\036\052\044\053\035\054\045\073\063" +
    "\076\057\077\050\001\002\000\046\003\uffad\006\uffad\010" +
    "\uffad\011\uffad\013\uffad\014\uffad\046\uffad\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\uffad\054\uffad\057\uffad\064\uffad\073" +
    "\uffad\076\uffad\077\uffad\001\002\000\014\003\uff9e\022\uff9e" +
    "\023\uff9e\056\uff9e\066\uff9e\001\002\000\044\003\113\016" +
    "\104\017\112\020\107\034\121\037\114\040\101\041\106" +
    "\042\077\043\120\044\115\045\111\051\103\065\100\067" +
    "\110\070\102\073\117\001\002\000\044\003\113\016\104" +
    "\017\112\020\107\034\121\037\114\040\101\041\106\042" +
    "\077\043\120\044\115\045\111\051\103\065\100\067\110" +
    "\070\102\073\117\001\002\000\044\003\113\016\104\017" +
    "\112\020\107\034\121\037\114\040\101\041\106\042\077" +
    "\043\120\044\115\045\111\051\103\065\100\067\110\070" +
    "\102\073\117\001\002\000\044\003\113\016\104\017\112" +
    "\020\107\034\121\037\114\040\101\041\106\042\077\043" +
    "\120\044\115\045\111\051\103\065\100\067\110\070\102" +
    "\073\117\001\002\000\044\003\113\016\104\017\112\020" +
    "\107\034\121\037\114\040\101\041\106\042\077\043\120" +
    "\044\115\045\111\051\103\065\100\067\110\070\102\073" +
    "\117\001\002\000\044\003\113\016\104\017\112\020\107" +
    "\034\121\037\114\040\101\041\106\042\077\043\120\044" +
    "\115\045\111\051\103\065\100\067\110\070\102\073\117" +
    "\001\002\000\024\003\uffa3\022\uffa3\023\uffa3\033\130\034" +
    "\126\035\132\036\127\056\uffa3\066\uffa3\001\002\000\024" +
    "\003\uffa5\022\uffa5\023\uffa5\033\130\034\126\035\132\036" +
    "\127\056\uffa5\066\uffa5\001\002\000\024\003\uffa2\022\uffa2" +
    "\023\uffa2\033\130\034\126\035\132\036\127\056\uffa2\066" +
    "\uffa2\001\002\000\024\003\uffa1\022\uffa1\023\uffa1\033\130" +
    "\034\126\035\132\036\127\056\uffa1\066\uffa1\001\002\000" +
    "\024\003\uffa4\022\uffa4\023\uffa4\033\130\034\126\035\132" +
    "\036\127\056\uffa4\066\uffa4\001\002\000\024\003\uffa0\022" +
    "\uffa0\023\uffa0\033\130\034\126\035\132\036\127\056\uffa0" +
    "\066\uffa0\001\002\000\014\003\uff9c\022\uff9c\023\uff9c\056" +
    "\uff9c\066\uff9c\001\002\000\034\022\uff9f\023\uff9f\025\324" +
    "\026\321\027\325\030\322\031\323\032\320\033\130\034" +
    "\126\035\132\036\127\066\237\001\002\000\010\022\313" +
    "\023\311\066\337\001\002\000\014\003\uff9b\022\uff9b\023" +
    "\uff9b\056\uff9b\066\uff9b\001\002\000\046\003\uffe5\006\uffe5" +
    "\010\uffe5\011\uffe5\013\uffe5\014\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\053\uffe5\054\uffe5\057\uffe5\064\uffe5" +
    "\073\uffe5\076\uffe5\077\uffe5\001\002\000\046\003\uffe4\006" +
    "\uffe4\010\uffe4\011\uffe4\013\uffe4\014\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\053\uffe4\054\uffe4\057\uffe4\064" +
    "\uffe4\073\uffe4\076\uffe4\077\uffe4\001\002\000\046\003\113" +
    "\016\104\017\112\020\107\024\305\034\121\037\114\040" +
    "\101\041\106\042\077\043\120\044\115\045\111\051\103" +
    "\065\304\067\110\070\102\073\117\001\002\000\046\003" +
    "\113\016\104\017\112\020\107\024\305\034\121\037\114" +
    "\040\101\041\106\042\077\043\120\044\115\045\111\051" +
    "\103\065\304\067\110\070\102\073\117\001\002\000\012" +
    "\003\345\022\313\023\311\066\346\001\002\000\004\007" +
    "\353\001\002\000\006\003\347\007\350\001\002\000\042" +
    "\003\163\004\153\006\042\011\064\013\046\014\040\046" +
    "\061\047\033\050\062\051\036\052\044\053\035\054\045" +
    "\073\063\076\057\077\050\001\002\000\042\003\163\004" +
    "\153\006\042\011\064\013\046\014\040\046\061\047\033" +
    "\050\062\051\036\052\044\053\035\054\045\073\063\076" +
    "\057\077\050\001\002\000\046\003\uffae\006\uffae\010\uffae" +
    "\011\uffae\013\uffae\014\uffae\046\uffae\047\uffae\050\uffae\051" +
    "\uffae\052\uffae\053\uffae\054\uffae\057\uffae\064\uffae\073\uffae" +
    "\076\uffae\077\uffae\001\002\000\046\003\uffaa\006\uffaa\010" +
    "\uffaa\011\uffaa\013\uffaa\014\uffaa\046\uffaa\047\uffaa\050\uffaa" +
    "\051\uffaa\052\uffaa\053\uffaa\054\uffaa\057\uffaa\064\uffaa\073" +
    "\uffaa\076\uffaa\077\uffaa\001\002\000\042\003\163\004\153" +
    "\006\042\011\064\013\046\014\040\046\061\047\033\050" +
    "\062\051\036\052\044\053\035\054\045\073\063\076\057" +
    "\077\050\001\002\000\046\003\uffab\006\uffab\010\uffab\011" +
    "\uffab\013\uffab\014\uffab\046\uffab\047\uffab\050\uffab\051\uffab" +
    "\052\uffab\053\uffab\054\uffab\057\uffab\064\uffab\073\uffab\076" +
    "\uffab\077\uffab\001\002\000\010\022\313\023\311\066\356" +
    "\001\002\000\004\007\357\001\002\000\042\003\163\004" +
    "\153\006\042\011\064\013\046\014\040\046\061\047\033" +
    "\050\062\051\036\052\044\053\035\054\045\073\063\076" +
    "\057\077\050\001\002\000\046\003\uffac\006\uffac\010\uffac" +
    "\011\uffac\013\uffac\014\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\057\uffac\064\uffac\073\uffac" +
    "\076\uffac\077\uffac\001\002\000\006\003\370\057\367\001" +
    "\002\000\004\057\363\001\002\000\042\003\200\006\042" +
    "\011\064\013\046\014\040\046\061\047\033\050\062\051" +
    "\036\052\044\053\035\054\045\057\171\073\063\076\057" +
    "\077\050\001\002\000\004\062\365\001\002\000\004\005" +
    "\366\001\002\000\046\003\uff91\006\uff91\010\uff91\011\uff91" +
    "\013\uff91\014\uff91\046\uff91\047\uff91\050\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\057\uff91\064\uff91\073\uff91\076\uff91" +
    "\077\uff91\001\002\000\042\003\375\006\042\011\064\013" +
    "\046\014\040\046\061\047\033\050\062\051\036\052\044" +
    "\053\035\054\045\057\171\073\063\076\057\077\050\001" +
    "\002\000\042\003\200\006\042\011\064\013\046\014\040" +
    "\046\061\047\033\050\062\051\036\052\044\053\035\054" +
    "\045\057\171\073\063\076\057\077\050\001\002\000\004" +
    "\062\372\001\002\000\004\005\373\001\002\000\046\003" +
    "\uff90\006\uff90\010\uff90\011\uff90\013\uff90\014\uff90\046\uff90" +
    "\047\uff90\050\uff90\051\uff90\052\uff90\053\uff90\054\uff90\057" +
    "\uff90\064\uff90\073\uff90\076\uff90\077\uff90\001\002\000\006" +
    "\003\u0100\062\u0101\001\002\000\044\003\200\006\042\011" +
    "\064\013\046\014\040\046\061\047\033\050\062\051\036" +
    "\052\044\053\035\054\045\057\171\062\376\073\063\076" +
    "\057\077\050\001\002\000\004\005\377\001\002\000\046" +
    "\003\uff8f\006\uff8f\010\uff8f\011\uff8f\013\uff8f\014\uff8f\046" +
    "\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f\054\uff8f" +
    "\057\uff8f\064\uff8f\073\uff8f\076\uff8f\077\uff8f\001\002\000" +
    "\004\005\u0104\001\002\000\006\003\u0102\005\u0103\001\002" +
    "\000\046\003\uff8d\006\uff8d\010\uff8d\011\uff8d\013\uff8d\014" +
    "\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d" +
    "\054\uff8d\057\uff8d\064\uff8d\073\uff8d\076\uff8d\077\uff8d\001" +
    "\002\000\046\003\uff92\006\uff92\010\uff92\011\uff92\013\uff92" +
    "\014\uff92\046\uff92\047\uff92\050\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\057\uff92\064\uff92\073\uff92\076\uff92\077\uff92" +
    "\001\002\000\046\003\uff8e\006\uff8e\010\uff8e\011\uff8e\013" +
    "\uff8e\014\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\052\uff8e" +
    "\053\uff8e\054\uff8e\057\uff8e\064\uff8e\073\uff8e\076\uff8e\077" +
    "\uff8e\001\002\000\012\003\uffc7\055\uffc7\056\uffc7\066\uffc7" +
    "\001\002\000\012\002\uffee\003\uffee\021\uffee\075\uffee\001" +
    "\002\000\010\003\uffbb\056\uffbb\066\uffbb\001\002\000\050" +
    "\003\113\016\104\017\112\020\107\024\305\034\121\037" +
    "\114\040\101\041\106\042\077\043\120\044\115\045\111" +
    "\051\103\065\304\067\110\070\102\071\u010a\073\117\001" +
    "\002\000\010\003\uffc1\056\uffc1\066\uffc1\001\002\000\006" +
    "\003\u010d\065\u010e\001\002\000\010\003\uffba\056\uffba\066" +
    "\uffba\001\002\000\014\003\uffb9\022\313\023\311\056\uffb9" +
    "\066\uffb9\001\002\000\004\070\u0114\001\002\000\006\003" +
    "\u0110\070\u010f\001\002\000\006\003\u0112\066\u0113\001\002" +
    "\000\004\066\u0111\001\002\000\010\003\uffb5\056\uffb5\066" +
    "\uffb5\001\002\000\010\003\uffb4\056\uffb4\066\uffb4\001\002" +
    "\000\010\003\uffb7\056\uffb7\066\uffb7\001\002\000\004\066" +
    "\u0115\001\002\000\010\003\uffb6\056\uffb6\066\uffb6\001\002" +
    "\000\042\003\056\006\042\011\064\013\046\014\040\046" +
    "\061\047\033\050\062\051\036\052\044\053\035\054\045" +
    "\064\034\073\063\076\057\077\050\001\002\000\042\003" +
    "\056\006\042\011\064\013\046\014\040\046\061\047\033" +
    "\050\062\051\036\052\044\053\035\054\045\064\034\073" +
    "\063\076\057\077\050\001\002\000\012\002\ufff3\003\ufff3" +
    "\021\ufff3\075\ufff3\001\002\000\012\002\ufff4\003\ufff4\021" +
    "\ufff4\075\ufff4\001\002\000\012\002\ufff0\003\ufff0\021\ufff0" +
    "\075\ufff0\001\002\000\012\002\ufff2\003\ufff2\021\ufff2\075" +
    "\ufff2\001\002\000\004\066\u011d\001\002\000\004\056\u011e" +
    "\001\002\000\046\003\uff76\006\uff76\010\uff76\011\uff76\013" +
    "\uff76\014\uff76\046\uff76\047\uff76\050\uff76\051\uff76\052\uff76" +
    "\053\uff76\054\uff76\057\uff76\064\uff76\073\uff76\076\uff76\077" +
    "\uff76\001\002\000\012\051\u0124\067\u0122\070\u0121\073\u0120" +
    "\001\002\000\004\066\uff72\001\002\000\004\066\uff75\001" +
    "\002\000\004\066\uff74\001\002\000\004\066\u0125\001\002" +
    "\000\004\066\uff73\001\002\000\004\056\u0126\001\002\000" +
    "\046\003\uff77\006\uff77\010\uff77\011\uff77\013\uff77\014\uff77" +
    "\046\uff77\047\uff77\050\uff77\051\uff77\052\uff77\053\uff77\054" +
    "\uff77\057\uff77\064\uff77\073\uff77\076\uff77\077\uff77\001\002" +
    "\000\012\002\ufff1\003\ufff1\021\ufff1\075\ufff1\001\002\000" +
    "\046\003\113\016\104\017\112\020\107\024\305\034\121" +
    "\037\114\040\101\041\106\042\077\043\120\044\115\045" +
    "\111\051\103\065\304\067\110\070\102\073\117\001\002" +
    "\000\046\003\113\016\104\017\112\020\107\024\305\034" +
    "\121\037\114\040\101\041\106\042\077\043\120\044\115" +
    "\045\111\051\103\065\304\067\110\070\102\073\117\001" +
    "\002\000\012\003\u012b\022\313\023\311\066\u012c\001\002" +
    "\000\004\007\u0131\001\002\000\006\003\u012e\007\u012d\001" +
    "\002\000\042\003\163\004\153\006\042\011\064\013\046" +
    "\014\040\046\061\047\033\050\062\051\036\052\044\053" +
    "\035\054\045\073\063\076\057\077\050\001\002\000\042" +
    "\003\163\004\153\006\042\011\064\013\046\014\040\046" +
    "\061\047\033\050\062\051\036\052\044\053\035\054\045" +
    "\073\063\076\057\077\050\001\002\000\046\003\uffa6\006" +
    "\uffa6\010\uffa6\011\uffa6\013\uffa6\014\uffa6\046\uffa6\047\uffa6" +
    "\050\uffa6\051\uffa6\052\uffa6\053\uffa6\054\uffa6\057\uffa6\064" +
    "\uffa6\073\uffa6\076\uffa6\077\uffa6\001\002\000\046\003\uffa9" +
    "\006\uffa9\010\uffa9\011\uffa9\013\uffa9\014\uffa9\046\uffa9\047" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\057\uffa9" +
    "\064\uffa9\073\uffa9\076\uffa9\077\uffa9\001\002\000\042\003" +
    "\163\004\153\006\042\011\064\013\046\014\040\046\061" +
    "\047\033\050\062\051\036\052\044\053\035\054\045\073" +
    "\063\076\057\077\050\001\002\000\046\003\uffa7\006\uffa7" +
    "\010\uffa7\011\uffa7\013\uffa7\014\uffa7\046\uffa7\047\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\057\uffa7\064\uffa7" +
    "\073\uffa7\076\uffa7\077\uffa7\001\002\000\010\022\313\023" +
    "\311\066\u0134\001\002\000\004\007\u0135\001\002\000\042" +
    "\003\163\004\153\006\042\011\064\013\046\014\040\046" +
    "\061\047\033\050\062\051\036\052\044\053\035\054\045" +
    "\073\063\076\057\077\050\001\002\000\046\003\uffa8\006" +
    "\uffa8\010\uffa8\011\uffa8\013\uffa8\014\uffa8\046\uffa8\047\uffa8" +
    "\050\uffa8\051\uffa8\052\uffa8\053\uffa8\054\uffa8\057\uffa8\064" +
    "\uffa8\073\uffa8\076\uffa8\077\uffa8\001\002\000\012\002\uffef" +
    "\003\uffef\021\uffef\075\uffef\001\002\000\046\003\113\016" +
    "\104\017\112\020\107\024\305\034\121\037\114\040\101" +
    "\041\106\042\077\043\120\044\115\045\111\051\103\065" +
    "\304\067\110\070\102\073\117\001\002\000\046\003\113" +
    "\016\104\017\112\020\107\024\305\034\121\037\114\040" +
    "\101\041\106\042\077\043\120\044\115\045\111\051\103" +
    "\065\304\067\110\070\102\073\117\001\002\000\012\003" +
    "\u013b\022\313\023\311\066\u013c\001\002\000\004\015\u0141" +
    "\001\002\000\006\003\u013d\015\u013e\001\002\000\042\003" +
    "\163\004\153\006\042\011\064\013\046\014\040\046\061" +
    "\047\033\050\062\051\036\052\044\053\035\054\045\073" +
    "\063\076\057\077\050\001\002\000\042\003\163\004\153" +
    "\006\042\011\064\013\046\014\040\046\061\047\033\050" +
    "\062\051\036\052\044\053\035\054\045\073\063\076\057" +
    "\077\050\001\002\000\046\003\uff84\006\uff84\010\uff84\011" +
    "\uff84\013\uff84\014\uff84\046\uff84\047\uff84\050\uff84\051\uff84" +
    "\052\uff84\053\uff84\054\uff84\057\uff84\064\uff84\073\uff84\076" +
    "\uff84\077\uff84\001\002\000\046\003\uff81\006\uff81\010\uff81" +
    "\011\uff81\013\uff81\014\uff81\046\uff81\047\uff81\050\uff81\051" +
    "\uff81\052\uff81\053\uff81\054\uff81\057\uff81\064\uff81\073\uff81" +
    "\076\uff81\077\uff81\001\002\000\042\003\163\004\153\006" +
    "\042\011\064\013\046\014\040\046\061\047\033\050\062" +
    "\051\036\052\044\053\035\054\045\073\063\076\057\077" +
    "\050\001\002\000\046\003\uff82\006\uff82\010\uff82\011\uff82" +
    "\013\uff82\014\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052" +
    "\uff82\053\uff82\054\uff82\057\uff82\064\uff82\073\uff82\076\uff82" +
    "\077\uff82\001\002\000\010\022\313\023\311\066\u0144\001" +
    "\002\000\004\015\u0145\001\002\000\042\003\163\004\153" +
    "\006\042\011\064\013\046\014\040\046\061\047\033\050" +
    "\062\051\036\052\044\053\035\054\045\073\063\076\057" +
    "\077\050\001\002\000\046\003\uff83\006\uff83\010\uff83\011" +
    "\uff83\013\uff83\014\uff83\046\uff83\047\uff83\050\uff83\051\uff83" +
    "\052\uff83\053\uff83\054\uff83\057\uff83\064\uff83\073\uff83\076" +
    "\uff83\077\uff83\001\002\000\012\003\uffb8\055\u0108\056\uffb8" +
    "\066\uffb8\001\002\000\010\003\uffc2\056\uffc2\066\uffc2\001" +
    "\002\000\004\066\u014a\001\002\000\004\056\u014b\001\002" +
    "\000\046\003\uff78\006\uff78\010\uff78\011\uff78\013\uff78\014" +
    "\uff78\046\uff78\047\uff78\050\uff78\051\uff78\052\uff78\053\uff78" +
    "\054\uff78\057\uff78\064\uff78\073\uff78\076\uff78\077\uff78\001" +
    "\002\000\012\002\ufff7\003\ufff7\021\ufff7\075\ufff7\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u014a\000\010\002\003\003\010\004\005\001\001\000" +
    "\004\007\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\002\003\003" +
    "\010\004\011\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\006\u014b" +
    "\020\053\022\054\023\052\026\050\027\057\033\036\036" +
    "\042\037\051\040\040\001\001\000\002\001\001\000\026" +
    "\006\046\020\053\022\054\023\052\026\050\027\057\033" +
    "\036\036\042\037\051\040\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\u0146\022\054\001\001\000\002\001\001\000\026" +
    "\006\u0136\020\053\022\054\023\052\026\050\027\057\033" +
    "\036\036\042\037\051\040\040\001\001\000\002\001\001" +
    "\000\026\006\u0126\020\053\022\054\023\052\026\050\027" +
    "\057\033\036\036\042\037\051\040\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\006\u011a\020\053\022\054" +
    "\023\052\026\050\027\057\033\036\036\042\037\051\040" +
    "\040\001\001\000\026\006\u0119\020\053\022\054\023\052" +
    "\026\050\027\057\033\036\036\042\037\051\040\040\001" +
    "\001\000\002\001\001\000\006\024\u0108\025\u0106\001\001" +
    "\000\002\001\001\000\026\006\u0105\020\053\022\054\023" +
    "\052\026\050\027\057\033\036\036\042\037\051\040\040" +
    "\001\001\000\004\022\u0104\001\001\000\004\030\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\256" +
    "\001\001\000\002\001\001\000\012\020\053\022\054\023" +
    "\252\033\036\001\001\000\012\020\053\022\054\023\066" +
    "\033\036\001\001\000\002\001\001\000\004\041\251\001" +
    "\001\000\004\041\073\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\242\016\115\001" +
    "\001\000\006\014\104\016\115\001\001\000\002\001\001" +
    "\000\006\014\235\016\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\124\016\115\001" +
    "\001\000\002\001\001\000\006\014\135\016\115\001\001" +
    "\000\006\014\134\016\115\001\001\000\006\014\133\016" +
    "\115\001\001\000\002\001\001\000\006\014\132\016\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\141\016\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\146\016\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\010\156\020\053\022\054\023\161\026\157" +
    "\027\057\033\036\034\231\036\155\037\160\040\153\001" +
    "\001\000\030\010\156\020\053\022\054\023\161\026\157" +
    "\027\057\033\036\034\154\036\155\037\160\040\153\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\171\020\053\022\054\023\176\026\174" +
    "\027\057\033\036\036\173\037\175\040\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\210\020\053" +
    "\022\054\023\176\026\174\027\057\033\036\036\173\037" +
    "\175\040\172\001\001\000\026\005\207\020\053\022\054" +
    "\023\176\026\174\027\057\033\036\036\173\037\175\040" +
    "\172\001\001\000\026\005\206\020\053\022\054\023\176" +
    "\026\174\027\057\033\036\036\173\037\175\040\172\001" +
    "\001\000\026\005\205\020\053\022\054\023\176\026\174" +
    "\027\057\033\036\036\173\037\175\040\172\001\001\000" +
    "\002\001\001\000\026\005\200\020\053\022\054\023\176" +
    "\026\174\027\057\033\036\036\173\037\175\040\172\001" +
    "\001\000\002\001\001\000\026\005\204\020\053\022\054" +
    "\023\176\026\174\027\057\033\036\036\173\037\175\040" +
    "\172\001\001\000\026\005\203\020\053\022\054\023\176" +
    "\026\174\027\057\033\036\036\173\037\175\040\172\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\005\220\020\053" +
    "\022\054\023\176\026\174\027\057\033\036\036\173\037" +
    "\175\040\172\001\001\000\026\005\215\020\053\022\054" +
    "\023\176\026\174\027\057\033\036\036\173\037\175\040" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\005\200\020\053\022" +
    "\054\023\176\026\174\027\057\033\036\036\173\037\175" +
    "\040\172\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\014" +
    "\233\016\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\014\240\016" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\010\156\020\053\022\054\023\161\026" +
    "\157\027\057\033\036\034\244\036\155\037\160\040\153" +
    "\001\001\000\002\001\001\000\006\014\246\016\115\001" +
    "\001\000\002\001\001\000\030\010\156\020\053\022\054" +
    "\023\161\026\157\027\057\033\036\034\250\036\155\037" +
    "\160\040\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\041\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\260" +
    "\001\001\000\002\001\001\000\006\014\262\016\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\031\267\032\270\001\001\000\024\011\301\020" +
    "\053\022\054\023\276\033\036\035\277\036\274\037\275" +
    "\040\272\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\012\307" +
    "\013\305\014\306\016\115\001\001\000\012\012\335\013" +
    "\305\014\334\016\115\001\001\000\012\012\333\013\305" +
    "\014\306\016\115\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\012\316\013\305\014\306" +
    "\016\115\001\001\000\002\001\001\000\012\012\313\013" +
    "\305\014\306\016\115\001\001\000\002\001\001\000\030" +
    "\010\156\020\053\022\054\023\161\026\157\027\057\033" +
    "\036\034\315\036\155\037\160\040\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\014\332\016\115\001" +
    "\001\000\006\014\331\016\115\001\001\000\006\014\330" +
    "\016\115\001\001\000\006\014\327\016\115\001\001\000" +
    "\006\014\326\016\115\001\001\000\006\014\325\016\115" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\012\354\013\305\014\306\016\115\001\001\000\012\012" +
    "\343\013\305\014\306\016\115\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\010\156\020" +
    "\053\022\054\023\161\026\157\027\057\033\036\034\351" +
    "\036\155\037\160\040\153\001\001\000\030\010\156\020" +
    "\053\022\054\023\161\026\157\027\057\033\036\034\350" +
    "\036\155\037\160\040\153\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\156\020\053\022\054\023\161" +
    "\026\157\027\057\033\036\034\353\036\155\037\160\040" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\010\156\020\053\022\054\023\161\026" +
    "\157\027\057\033\036\034\357\036\155\037\160\040\153" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\005\363\020\053\022\054\023\176\026\174" +
    "\027\057\033\036\036\173\037\175\040\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\005\373\020\053\022\054\023\176\026\174\027\057\033" +
    "\036\036\173\037\175\040\172\001\001\000\026\005\370" +
    "\020\053\022\054\023\176\026\174\027\057\033\036\036" +
    "\173\037\175\040\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\005" +
    "\200\020\053\022\054\023\176\026\174\027\057\033\036" +
    "\036\173\037\175\040\172\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\012\u010b" +
    "\013\305\014\306\015\u010a\016\115\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\006" +
    "\u0118\020\053\022\054\023\052\026\050\027\057\033\036" +
    "\036\042\037\051\040\040\001\001\000\026\006\u0117\020" +
    "\053\022\054\023\052\026\050\027\057\033\036\036\042" +
    "\037\051\040\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u0122\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\012\u0132\013\305" +
    "\014\306\016\115\001\001\000\012\012\u0129\013\305\014" +
    "\306\016\115\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\010\156\020\053\022\054\023" +
    "\161\026\157\027\057\033\036\034\u012f\036\155\037\160" +
    "\040\153\001\001\000\030\010\156\020\053\022\054\023" +
    "\161\026\157\027\057\033\036\034\u012e\036\155\037\160" +
    "\040\153\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\010\156\020\053\022\054\023\161\026\157\027\057" +
    "\033\036\034\u0131\036\155\037\160\040\153\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\156\020\053\022\054\023\161\026\157\027\057\033" +
    "\036\034\u0135\036\155\037\160\040\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\012\u0142\013\305\014" +
    "\306\016\115\001\001\000\012\012\u0139\013\305\014\306" +
    "\016\115\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\010\156\020\053\022\054\023\161" +
    "\026\157\027\057\033\036\034\u013f\036\155\037\160\040" +
    "\153\001\001\000\030\010\156\020\053\022\054\023\161" +
    "\026\157\027\057\033\036\034\u013e\036\155\037\160\040" +
    "\153\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\010\156\020\053\022\054\023\161\026\157\027\057\033" +
    "\036\034\u0141\036\155\037\160\040\153\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\010" +
    "\156\020\053\022\054\023\161\026\157\027\057\033\036" +
    "\034\u0145\036\155\037\160\040\153\001\001\000\002\001" +
    "\001\000\006\024\u0147\025\u0106\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ScriptParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ScriptParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ScriptParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public static int errors = 0;
int lineError=0; 
int columnError=0;
String tokenError = "";
String expectedTokens = "";

CScripting script;
Object context;
int line =0;
int column=0;
boolean igualacion=false;
ArrayList<Function> gatheredFunctions;

public ArrayList<Function> getFunctions(){
        return gatheredFunctions;
}

public void setLine(int newLine){
        this.line =newLine;
}

public void setColumn(int newColumn){
        this.column =newColumn;
}

//Context for script 
public void setScript(CScripting script){
        this.script=script;
}

public void report_error(String message, Object info) { 
    if (info instanceof String){
	Symbol s = cur_token;
	errors++;       
        if(message.equalsIgnoreCase(".")){
                message = "Se esperaba alguna forma como "+expectedTokens;
        }
        System.err.println("  "+ errors + "==> " + info + " en "+tokenError+": "+ message + " [linea: "+lineError+" columna: "+columnError+"]");
        ErrorHandler.syntaxErrorsScript.add(new SyntaxError(message, tokenError,String.valueOf(info), lineError+line, columnError+column));
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
}

public void report_error_final(String message, Object info){
    if (info instanceof String){
	Symbol s = cur_token;
	errors++;       
        
        if(message.equalsIgnoreCase(".")){
                message = "Se esperaba alguna forma como "+expectedTokens;
        }
        System.err.println("  "+ errors + "==> " + info + ": "+ message);
        ErrorHandler.syntaxErrorsScript.add(new SyntaxError(message, tokenError,String.valueOf(info), lineError+line, columnError+column));
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
}

@Override
	public void syntax_error(Symbol symbol){
	    int line = symbol.left;
	    int column = symbol.right;
	    String token = (String) cur_token.value;
	    //We get the production
            tokenError = token;
            lineError = line;
            columnError = column;
            expectedTokens = "";
            for(int index=0; index<expected_token_ids().size() ; index++){
                //We traduce the token to a form that the user might understand
                expectedTokens += symbl_name_from_id(expected_token_ids().get(index));
				expectedTokens += ", ";
            }
	}

@Override
	public void unrecovered_syntax_error(Symbol symbol){
                report_error_final(".", "Error Sintactico");
	}
        


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ScriptParser$actions {
  private final ScriptParser parser;

  /** Constructor */
  CUP$ScriptParser$actions(ScriptParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ScriptParser$do_action_part00000000(
    int                        CUP$ScriptParser$act_num,
    java_cup.runtime.lr_parser CUP$ScriptParser$parser,
    java.util.Stack            CUP$ScriptParser$stack,
    int                        CUP$ScriptParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ScriptParser$result;

      /* select the action based on the action number */
      switch (CUP$ScriptParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		ArrayList<Function> start_val = (ArrayList<Function>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		RESULT = start_val;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ScriptParser$parser.done_parsing();
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // function ::= ONLOAD OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Function RESULT =null;
		int processleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int processright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Object process = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		
                Function funcion = new Function(String.valueOf(process),cur_token.left+line, cur_token.right+column,true);
                RESULT = funcion;
        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("function",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // function ::= PROCESS OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Function RESULT =null;
		int processleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int processright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Object process = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		
                Function funcion = new Function(String.valueOf(process),cur_token.left+line, cur_token.right+column, false);
                RESULT = funcion;
        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("function",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // function ::= error OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Function RESULT =null;
		parser.report_error("Se esperaba PROCESS_... o ONLOAD" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("function",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // function ::= ONLOAD error CLOSE_PARENTHESIS 
            {
              Function RESULT =null;
		parser.report_error("Se esperaba (" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("function",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // function ::= ONLOAD OPEN_PARENTHESIS error 
            {
              Function RESULT =null;
		parser.report_error("Se esperaba )" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("function",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // function ::= PROCESS error CLOSE_PARENTHESIS 
            {
              Function RESULT =null;
		parser.report_error("Se esperaba (" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("function",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // function ::= PROCESS OPEN_PARENTHESIS error 
            {
              Function RESULT =null;
		parser.report_error("Se esperaba )" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("function",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sfunction ::= function open 
            {
              Function RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> ins = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                if(f!=null){
                        if(ins !=null){
                                Function funcion = f;
                                ArrayList<Instruccion> instrucciones = ins;
                                funcion.pushInstrucciones(instrucciones);
                                RESULT = funcion;
                        }
                        RESULT = f;
                }
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("sfunction",1, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // open ::= error codigofunction 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba [" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("open",5, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // open ::= OPEN_BRACKET codigofunction 
            {
              ArrayList<Instruccion> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> ins = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=ins;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("open",5, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // s ::= sfunction s 
            {
              ArrayList<Function> RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Function> e = (ArrayList<Function>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        if(e!=null){
                if(f!=null){
                        ArrayList<Function> funciones = e;
                        funciones.add(f);
                        RESULT = funciones;
                }
                RESULT =e;
        }
        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("s",2, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // s ::= 
            {
              ArrayList<Function> RESULT =null;
		
        ArrayList<Function> funciones = new ArrayList();
        //Aprovechamos la memoria para colocarlo
        gatheredFunctions = funciones;
        RESULT = funciones;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("s",2, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // codigofunction ::= declarations error codigofunction 
            {
              ArrayList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        parser.report_error("Se esperaba ;","Error Sintactico");
                        RESULT = b;
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigofunction",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // codigofunction ::= declarations COLON codigofunction 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		MultipleVariable a = (MultipleVariable)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                                if(b!=null){
                                                        if(a!=null){
                                                                ArrayList<Instruccion> array = b;
                                                                b.add(a);
                                                                RESULT = array;
                                                        }
                                                        RESULT =b;
                                                }
                                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigofunction",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // codigofunction ::= if codigofunction 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                                if(b!=null){
                                                        if(a!=null){
                                                                ArrayList<Instruccion> array = b;
                                                                b.add(a);
                                                                RESULT = array;
                                                        }
                                                        RESULT =b;
                                                }
                                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigofunction",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // codigofunction ::= repeat codigofunction 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Repeat a = (Repeat)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                                if(b!=null){
                                                        if(a!=null){
                                                                ArrayList<Instruccion> array = b;
                                                                b.add(a);
                                                                RESULT = array;
                                                        }
                                                        RESULT =b;
                                                }
                                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigofunction",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // codigofunction ::= while codigofunction 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		While a = (While)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                                if(b!=null){
                                                        if(a!=null){
                                                                ArrayList<Instruccion> array = b;
                                                                b.add(a);
                                                                RESULT = array;
                                                        }
                                                        RESULT =b;
                                                }
                                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigofunction",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigofunction ::= specactions codigofunction 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                                if(b!=null){
                                                        if(a!=null){
                                                                ArrayList<Instruccion> array = b;
                                                                b.add(a);
                                                                RESULT = array;
                                                        }
                                                        RESULT =b;
                                                }
                                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigofunction",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigofunction ::= error codigofunction 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba una declaracion, accion especial, condicion, ciclo o ]" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigofunction",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // codigofunction ::= CLOSE_BRACKET 
            {
              ArrayList<Instruccion> RESULT =null;
		
                        ArrayList<Instruccion> array=new ArrayList();
                        RESULT = array;                
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigofunction",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // linecode ::= declarations error 
            {
              Instruccion RESULT =null;
		parser.report_error("Se esperaba ;","Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecode",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // linecode ::= declarations COLON 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		MultipleVariable e = (MultipleVariable)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		RESULT=e;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecode",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // linecode ::= repeat 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Repeat e = (Repeat)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=e;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecode",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // linecode ::= if 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		If e = (If)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=e;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecode",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // linecode ::= while 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		While e = (While)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=e;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecode",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // linecode ::= specactions 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=e;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecode",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // linecode ::= error 
            {
              Instruccion RESULT =null;
		parser.report_error("Se esperaba una declaracion, accion especial, condicion o un ciclo " , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecode",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // linecodeif ::= declarations error 
            {
              Instruccion RESULT =null;
		parser.report_error("Se esperaba ;","Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecodeif",7, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // linecodeif ::= declarations COLON 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		MultipleVariable e = (MultipleVariable)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		RESULT=e;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecodeif",7, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // linecodeif ::= repeat 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Repeat e = (Repeat)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=e;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecodeif",7, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // linecodeif ::= while 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		While e = (While)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=e;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecodeif",7, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // linecodeif ::= specactions 
            {
              Instruccion RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=e;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecodeif",7, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // linecodeif ::= error 
            {
              Instruccion RESULT =null;
		parser.report_error("Se esperaba una declaracion, accion especial, ciclo o ]" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("linecodeif",7, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // codigo ::= declarations error codigo 
            {
              ArrayList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        parser.report_error("Se esperaba ;","Error Sintactico");
                        RESULT = b;
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // codigo ::= declarations COLON codigo 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		MultipleVariable a = (MultipleVariable)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                if(b!=null){
                                        if(a!=null){
                                                ArrayList<Instruccion> array = b;
                                                b.add(a);
                                                RESULT = array;
                                        }
                                }
                                RESULT = b;
                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // codigo ::= if codigo 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                if(b!=null){
                                        if(a!=null){
                                                ArrayList<Instruccion> array = b;
                                                b.add(a);
                                                RESULT = array;
                                        }
                                }
                                RESULT = b;
                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // codigo ::= repeat codigo 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Repeat a = (Repeat)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                if(b!=null){
                                        if(a!=null){
                                                ArrayList<Instruccion> array = b;
                                                b.add(a);
                                                RESULT = array;
                                        }
                                }
                                RESULT = b;
                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // codigo ::= while codigo 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		While a = (While)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                if(b!=null){
                                        if(a!=null){
                                                ArrayList<Instruccion> array = b;
                                                b.add(a);
                                                RESULT = array;
                                        }
                                }
                                RESULT = b;
                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // codigo ::= specactions codigo 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                if(b!=null){
                                        if(a!=null){
                                                ArrayList<Instruccion> array = b;
                                                b.add(a);
                                                RESULT = array;
                                        }
                                }
                                RESULT = b;
                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // codigo ::= error codigo 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba una declaracion, accion especial, condicion, ciclo o ]" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // codigo ::= SEMICOLON 
            {
              ArrayList<Instruccion> RESULT =null;
		
                        ArrayList<Instruccion> array = new ArrayList();
                        RESULT =array;
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("codigo",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // op ::= op SUMA op 
            {
              Operation RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation left = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation right = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = new Operation(left,String.valueOf(s),right,
                                cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // op ::= op RESTA op 
            {
              Operation RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation left = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation right = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = new Operation(left,String.valueOf(s),right,
                                cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // op ::= op DIV op 
            {
              Operation RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation left = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation right = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = new Operation(left,String.valueOf(s),right,
                                cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // op ::= op MULT op 
            {
              Operation RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation left = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation right = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = new Operation(left,String.valueOf(s),right,
                                cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // op ::= OPEN_PARENTHESIS op CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Operation val = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		val.setParenthesis();RESULT=val;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // op ::= NUMBER 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		Parameter parametro = new Parameter("int",String.valueOf(e),cur_token.left+line, cur_token.right+column);RESULT = new Operation(parametro); 
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // op ::= DECIMAL 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		Parameter parametro = new Parameter("decimal",String.valueOf(e),cur_token.left+line, cur_token.right+column);RESULT = new Operation(parametro); 
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // op ::= RESTA NUMBER 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		Parameter parametro = new Parameter("int",String.valueOf(-Integer.parseInt(String.valueOf(e))),cur_token.left+line, cur_token.right+column);RESULT = new Operation(parametro); 
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // op ::= RESTA DECIMAL 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		Parameter parametro = new Parameter("decimal",String.valueOf(-Integer.parseInt(String.valueOf(e))),cur_token.left+line, cur_token.right+column);RESULT = new Operation(parametro); 
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // op ::= STRING 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		String text = String.valueOf(e);
                text = text.substring(1,text.length()-1);
                Parameter parametro = new Parameter("string",text,cur_token.left+line, cur_token.right+column);
                RESULT = new Operation(parametro); 
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // op ::= SYMCHAR 
            {
              Operation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		String text = String.valueOf(e);
                text = text.substring(1,text.length()-1);
                Parameter parametro;
                if(text.length()==1){
                        parametro = new Parameter("char",text,cur_token.left+line, cur_token.right+column);
                }else{
                        parser.report_error("No es un char","Error Sintactico");
                        parametro = new Parameter("char","",cur_token.left+line, cur_token.right+column);
                }                
                RESULT = new Operation(parametro); 
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // op ::= TRUE 
            {
              Operation RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		Parameter parametro = new Parameter("boolean",String.valueOf(res),cur_token.left+line, cur_token.right+column);RESULT = new Operation(parametro); 
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // op ::= FALSE 
            {
              Operation RESULT =null;
		int resleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int resright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object res = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		Parameter parametro = new Parameter("boolean",String.valueOf(res),cur_token.left+line, cur_token.right+column);RESULT = new Operation(parametro); 
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // op ::= IDVARIABLE 
            {
              Operation RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		Parameter parametro = new Parameter("variable",String.valueOf(name),cur_token.left+line, cur_token.right+column);RESULT = new Operation(parametro); 
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // op ::= specfunction 
            {
              Operation RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation func = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = func; 
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // op ::= error 
            {
              Operation RESULT =null;
		parser.report_error("." , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("op",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // variable ::= GLOBAL variablea 
            {
              ArrayList<Variable> RESULT =null;
		int modeleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int moderight = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object mode = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int releft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Variable> re = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                        if(re!=null){
                                                ArrayList<Variable> variables = re;
                                                for(int index=0; index<variables.size(); index++){
                                                        variables.get(index).setMode(String.valueOf(mode));
                                                }
                                                RESULT=variables;
                                        }else{
                                                ArrayList<Variable> last = new ArrayList();
                                                RESULT = last;
                                        }
                                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // variable ::= variablea 
            {
              ArrayList<Variable> RESULT =null;
		int releft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int reright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Variable> re = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=re;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("variable",14, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // variablea ::= IDVARIABLE variable_re 
            {
              ArrayList<Variable> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Variable> array = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                if(array!=null){
                                        ArrayList<Variable> variables = array;
                                        variables.add(new Variable(String.valueOf(name),cur_token.left+line, cur_token.right+column));
                                        RESULT =  variables;
                                }else{
                                        ArrayList<Variable> last = new ArrayList();
                                        last.add(new Variable(String.valueOf(name),cur_token.left + line, cur_token.right +column));
                                        RESULT =  last;
                                }
                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("variablea",16, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // variable_re ::= COMA IDVARIABLE variable_re 
            {
              ArrayList<Variable> RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object name = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int arrayleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int arrayright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Variable> array = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        if(array !=null){
                                ArrayList<Variable> variables = array;
                                Variable newVariable = new Variable(String.valueOf(name),cur_token.left + line, cur_token.right +column);
                                variables.add(newVariable);
                                RESULT= variables;
                        }else{
                                ArrayList<Variable> last = new ArrayList();
                                last.add(new Variable(String.valueOf(name),cur_token.left + line, cur_token.right +column));
                                RESULT =  last;
                        }
                        
                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("variable_re",15, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // variable_re ::= 
            {
              ArrayList<Variable> RESULT =null;
		ArrayList<Variable> variables = new ArrayList();
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("variable_re",15, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // declarations ::= type variable declaration 
            {
              MultipleVariable RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int multipleleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int multipleright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		ArrayList<Variable> multiple = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Declaration valor = (Declaration)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        if(multiple!=null&& valor!=null){
                                ArrayList<Variable> variables = multiple;
                                for(int index=0; index<variables.size(); index++){
                                        variables.get(index).setValue(tipo,valor);
                                }
                                MultipleVariable a = new MultipleVariable(variables);
                                RESULT = a;
                        }
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("declarations",17, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // declarations ::= variable declaration 
            {
              MultipleVariable RESULT =null;
		int multipleleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int multipleright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		ArrayList<Variable> multiple = (ArrayList<Variable>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Declaration valor = (Declaration)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        if(valor==null){
                                parser.report_error("Se esperaba una asignacion de valor" , "Error Sintactico");
                        }else{
                                if(multiple!=null && valor !=null){
                                        ArrayList<Variable> variables = multiple;
                                        for(int index=0; index<variables.size(); index++){
                                                variables.get(index).setValue(valor);
                                        }
                                        MultipleVariable a = new MultipleVariable(variables);
                                        RESULT = a;
                                }
                        }
                        
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("declarations",17, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // type ::= INTEGER 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = "int";
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // type ::= DECIMAL 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = "decimal";
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // type ::= BOOLEAN 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = "boolean";
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // type ::= STRINGVAR 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = "string";
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // type ::= CHAR 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = "char";
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("type",25, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // declaration ::= assignations 
            {
              Declaration RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = new Declaration(f);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("declaration",18, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignations ::= EQUAL expression 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		System.out.println("ES EXPRESION");;RESULT=f;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("assignations",19, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignations ::= EQUAL condition 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Condition f = (Condition)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                if(f!=null){
                        //Get the condition and get the semantic error instance
                        Condition asd = f;
                        Operation operation = new Operation(asd, cur_token.left+line, cur_token.right+column);
                        RESULT = operation;
                }
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("assignations",19, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // assignations ::= 
            {
              Operation RESULT =null;

              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("assignations",19, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // expression ::= GETELEMENT OPEN_PARENTHESIS SYMCHAR CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		
                        String text = String.valueOf(f);
                        text = text.substring(1,text.length()-1);
                        Parameter parameter = new Parameter("string","document.getElementById(\""+text+"\" ).value",
                                                        cur_token.left +line, cur_token.right +column);
                        RESULT = new Operation(parameter);                
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // expression ::= GETELEMENT error SYMCHAR CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		parser.report_error("Se esperaba (" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // expression ::= GETELEMENT OPEN_PARENTHESIS error CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		parser.report_error("Se esperaba un char" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // expression ::= GETELEMENT OPEN_PARENTHESIS SYMCHAR error 
            {
              Operation RESULT =null;
		parser.report_error("Se esperaba )" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("expression",11, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // if ::= block_if elseif else 
            {
              If RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		If a = (If)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		ArrayList<ElseIf> b = (ArrayList<ElseIf>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Else c = (Else)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                if(a!=null){
                                        If left = a;
                                        ArrayList<ElseIf> center = b;
                                        Else right = c;
                                        left.setElseIfs(center);
                                        left.setElse(right);
                                        RESULT=left;
                                }
                                RESULT=a;
                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("if",20, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // elseif ::= elseif block_elseif 
            {
              ArrayList<ElseIf> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		ArrayList<ElseIf> a = (ArrayList<ElseIf>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ElseIf b = (ElseIf)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                                if(a!=null){
                                        if(b!=null){
                                                ArrayList<ElseIf> array = a;
                                                array.add(b);
                                                RESULT = array;
                                        }
                                }
                                RESULT=a;
                                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("elseif",22, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // elseif ::= 
            {
              ArrayList<ElseIf> RESULT =null;
		ArrayList<ElseIf> array = new ArrayList(); RESULT=array;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("elseif",22, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // else ::= ELSE instruccionif 
            {
              Else RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> ins = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=new Else(ins, cur_token.left+line, cur_token.right + column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("else",24, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // else ::= 
            {
              Else RESULT =null;

              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("else",24, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // block_elseif ::= ELSE IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN instruccion 
            {
              ElseIf RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> ins = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = new ElseIf(con,ins,
                                                                                                cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("block_elseif",23, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // block_elseif ::= ELSE error OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN instruccion 
            {
              ElseIf RESULT =null;
		parser.report_error("No se encontro la expresion IF" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("block_elseif",23, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // block_elseif ::= ELSE IF error condition CLOSE_PARENTHESIS THEN instruccion 
            {
              ElseIf RESULT =null;
		parser.report_error("Se esperaba (" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("block_elseif",23, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // block_elseif ::= ELSE IF OPEN_PARENTHESIS condition error THEN instruccion 
            {
              ElseIf RESULT =null;
		parser.report_error("Se esperaba )" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("block_elseif",23, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // block_elseif ::= ELSE IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS error instruccion 
            {
              ElseIf RESULT =null;
		parser.report_error("No se encontro la expresion THEN" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("block_elseif",23, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-6)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // block_if ::= IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THEN instruccion 
            {
              If RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).right;
		Condition con = (Condition)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> ins = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=new If(con, ins,
                                                                                        cur_token.left+line,
                                                                                        cur_token.right +column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("block_if",21, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // block_if ::= IF error condition CLOSE_PARENTHESIS THEN instruccion 
            {
              If RESULT =null;
		parser.report_error("Se esperaba (" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("block_if",21, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // block_if ::= IF OPEN_PARENTHESIS condition error THEN instruccion 
            {
              If RESULT =null;
		parser.report_error("Se esperaba )","Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("block_if",21, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // block_if ::= IF OPEN_PARENTHESIS condition CLOSE_PARENTHESIS error instruccion 
            {
              If RESULT =null;
		parser.report_error("No se encontro la expresion THEN" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("block_if",21, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // comparation ::= op EQUALIZATION op 
            {
              Comparation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=new Comparation(a, String.valueOf(s),b,cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("comparation",9, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // comparation ::= op DIFFERENTIATION op 
            {
              Comparation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=new Comparation(a, String.valueOf(s),b,cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("comparation",9, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // comparation ::= op LESSTHAN op 
            {
              Comparation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=new Comparation(a, String.valueOf(s),b,cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("comparation",9, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // comparation ::= op LESS op 
            {
              Comparation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=new Comparation(a, String.valueOf(s),b,cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("comparation",9, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // comparation ::= op GREATERTHAN op 
            {
              Comparation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=new Comparation(a, String.valueOf(s),b,cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("comparation",9, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // comparation ::= op GREATER op 
            {
              Comparation RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation a = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation b = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=new Comparation(a, String.valueOf(s),b,cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("comparation",9, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // comparation ::= op 
            {
              Comparation RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Operation e = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT=new Comparation(e);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("comparation",9, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // condition ::= condition AND condition 
            {
              Condition RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Condition a = (Condition)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Condition b = (Condition)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = new Condition(a,String.valueOf(s), b, cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // condition ::= condition OR condition 
            {
              Condition RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Condition a = (Condition)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Condition b = (Condition)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = new Condition(a,String.valueOf(s), b, cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // condition ::= NOT condition 
            {
              Condition RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Condition a = (Condition)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = new Condition(String.valueOf(s),a,cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // condition ::= OPEN_PARENTHESIS condition CLOSE_PARENTHESIS 
            {
              Condition RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		e.setParenthesis();RESULT=e;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // condition ::= comparation 
            {
              Condition RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Comparation a = (Comparation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		RESULT = new Condition(a,cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("condition",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // instruccion ::= INIT OPEN_CURLY SEMICOLON codigo CLOSE_CURLY END 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		RESULT=a;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccion",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // instruccion ::= INIT error SEMICOLON codigo CLOSE_CURLY END 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba {" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccion",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // instruccion ::= INIT OPEN_CURLY error codigo CLOSE_CURLY END 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba :" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccion",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // instruccion ::= INIT OPEN_CURLY SEMICOLON error CLOSE_CURLY END 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba :" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccion",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // instruccion ::= INIT OPEN_CURLY SEMICOLON codigo error END 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba }" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccion",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // instruccion ::= INIT OPEN_CURLY SEMICOLON codigo CLOSE_CURLY error 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Falta END" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccion",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // instruccion ::= linecode 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        if(a!=null){
                                ArrayList<Instruccion> array = new ArrayList();
                                array.add(a);
                                RESULT = array;
                        }
                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccion",26, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // instruccionif ::= INIT OPEN_CURLY SEMICOLON codigo CLOSE_CURLY END 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		RESULT=a;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccionif",27, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // instruccionif ::= INIT error SEMICOLON codigo CLOSE_CURLY END 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba {" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccionif",27, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // instruccionif ::= INIT OPEN_CURLY error codigo CLOSE_CURLY END 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba :" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccionif",27, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // instruccionif ::= INIT OPEN_CURLY SEMICOLON error CLOSE_CURLY END 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba :" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccionif",27, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // instruccionif ::= INIT OPEN_CURLY SEMICOLON codigo error END 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Se esperaba }" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccionif",27, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // instruccionif ::= INIT OPEN_CURLY SEMICOLON codigo CLOSE_CURLY error 
            {
              ArrayList<Instruccion> RESULT =null;
		parser.report_error("Falta END" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccionif",27, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // instruccionif ::= linecodeif 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        if(a!=null){
                                ArrayList<Instruccion> array=new ArrayList();
                                array.add(a);
                                RESULT=array;
                        }
                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("instruccionif",27, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // repeat ::= REPEAT OPEN_PARENTHESIS declarations CLOSE_PARENTHESIS huntil 
            {
              Repeat RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		MultipleVariable f = (MultipleVariable)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int hunleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int hunright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Huntil hun = (Huntil)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        if(f!=null && hun!=null){
                MultipleVariable multiple = f;
                ArrayList<Variable> variables = multiple.getVariables();
                if(variables.size()>1){
                        parser.report_error("Solo se esperaba una variable","Error Sintactic");
                }else if(variables.size()==1){
                        Repeat repeat = new Repeat(variables.get(0),hun,cur_token.left+line, cur_token.right+column);
                        RESULT = repeat;
                }
        }
        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("repeat",28, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // repeat ::= REPEAT error declarations CLOSE_PARENTHESIS huntil 
            {
              Repeat RESULT =null;
		parser.report_error("Falta (" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("repeat",28, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // repeat ::= REPEAT OPEN_PARENTHESIS declarations error huntil 
            {
              Repeat RESULT =null;
		parser.report_error("Falta )" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("repeat",28, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // huntil ::= HUNTIL OPEN_PARENTHESIS op CLOSE_PARENTHESIS instruccion 
            {
              Huntil RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> ins = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        if(f!=null){
                ArrayList<Instruccion> instrucciones = ins;
                Huntil huntil = new Huntil(ins,f,cur_token.left+line, cur_token.right+column);
                RESULT = huntil;
        }
        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("huntil",31, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // huntil ::= error OPEN_PARENTHESIS op CLOSE_PARENTHESIS instruccion 
            {
              Huntil RESULT =null;
		parser.report_error("Se esperaba la palabra HUNTIL" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("huntil",31, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // huntil ::= HUNTIL error op CLOSE_PARENTHESIS instruccion 
            {
              Huntil RESULT =null;
		parser.report_error("Falta (" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("huntil",31, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // huntil ::= HUNTIL OPEN_PARENTHESIS op error instruccion 
            {
              Huntil RESULT =null;
		parser.report_error("Falta )" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("huntil",31, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // while ::= WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS THENWHILE instruccion 
            {
              While RESULT =null;
		int conditionleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).left;
		int conditionright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).right;
		Condition condition = (Condition)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ArrayList<Instruccion> ins = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                if(condition!=null){
                        While another = new While(condition, ins, cur_token.left+line, cur_token.right+column);
                        RESULT = another;
                }
        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("while",29, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // while ::= WHILE error condition CLOSE_PARENTHESIS THENWHILE instruccion 
            {
              While RESULT =null;
		parser.report_error("Falta (" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("while",29, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // while ::= WHILE OPEN_PARENTHESIS condition error THENWHILE instruccion 
            {
              While RESULT =null;
		parser.report_error("Falta )" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("while",29, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // while ::= WHILE OPEN_PARENTHESIS condition CLOSE_PARENTHESIS error instruccion 
            {
              While RESULT =null;
		parser.report_error("Se esperaba THENWHILE" , "Error Sintactico");
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("while",29, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // specfunction ::= ASC OPEN_PARENTHESIS op CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		
                                                        SpecFunctions functions = new SpecFunctions("ASC", f, cur_token.left+line, cur_token.right+column);
                                                        RESULT = new Operation(functions, cur_token.left+line, cur_token.right +column);
                                                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specfunction",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // specfunction ::= DESC OPEN_PARENTHESIS op CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		
                                                        SpecFunctions functions = new SpecFunctions("DESC", f, cur_token.left+line, cur_token.right+column);
                                                        RESULT = new Operation(functions, cur_token.left+line, cur_token.right +column);
                                                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specfunction",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // specfunction ::= LETPAR_NUM OPEN_PARENTHESIS op CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		
                                                        SpecFunctions functions = new SpecFunctions("LETPAR_NUM", f, cur_token.left+line, cur_token.right+column);
                                                        RESULT = new Operation(functions, cur_token.left+line, cur_token.right +column);
                                                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specfunction",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // specfunction ::= LETIMPAR_NUM OPEN_PARENTHESIS op CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		
                                                        SpecFunctions functions = new SpecFunctions("LETIMPAR_NUM", f, cur_token.left+line, cur_token.right+column);
                                                        RESULT = new Operation(functions, cur_token.left+line, cur_token.right +column);
                                                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specfunction",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // specfunction ::= REVERSE OPEN_PARENTHESIS op CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		
                                                        SpecFunctions functions = new SpecFunctions("REVERSE", f, cur_token.left+line, cur_token.right+column);
                                                        RESULT = new Operation(functions, cur_token.left+line, cur_token.right +column);
                                                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specfunction",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // specfunction ::= CARACTER_ALEATORIO OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		
                                                        SpecFunctions functions = new SpecFunctions("RandChar", null, cur_token.left+line, cur_token.right+column);
                                                        RESULT = new Operation(functions, cur_token.left+line, cur_token.right +column);
                                                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specfunction",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // specfunction ::= NUM_ALEATORIO OPEN_PARENTHESIS CLOSE_PARENTHESIS 
            {
              Operation RESULT =null;
		
                                                        SpecFunctions functions = new SpecFunctions("RandInt", null, cur_token.left+line, cur_token.right+column);
                                                        RESULT = new Operation(functions, cur_token.left+line, cur_token.right +column);
                                                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specfunction",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // specactions ::= ALERT_INFO OPEN_PARENTHESIS op CLOSE_PARENTHESIS COLON 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Operation f = (Operation)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		RESULT= new Alert_Info(f,cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specactions",30, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // specactions ::= EXIT OPEN_PARENTHESIS CLOSE_PARENTHESIS COLON 
            {
              Instruccion RESULT =null;
		RESULT = new Exit(cur_token.left+line, cur_token.right+column);
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specactions",30, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // specactions ::= INSERT OPEN_PARENTHESIS textEspecial CLOSE_PARENTHESIS COLON 
            {
              Instruccion RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		Parameter f = (Parameter)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		
                RESULT = new Insert(f, cur_token.left+line, cur_token.right+column);   
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specactions",30, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // specactions ::= REDIRECT OPEN_PARENTHESIS CLOSE_PARENTHESIS COLON 
            {
              Instruccion RESULT =null;
		
                        RESULT = new Redirect(cur_token.left+line, cur_token.right+column);
                
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("specactions",30, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // textEspecial ::= SYMCHAR 
            {
              Parameter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        String text = String.valueOf(f);
                        text = text.substring(1,text.length()-1);
                        Parameter parametro = new Parameter("string",text, cur_token.left+line, cur_token.right+column);
                        RESULT = parametro;
                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("textEspecial",13, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // textEspecial ::= NUMBER 
            {
              Parameter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        String text = String.valueOf(f);
                        text = text.substring(1,text.length()-1);
                        Parameter parametro = new Parameter("int", text, cur_token.left+line, cur_token.right+column);
                        RESULT = parametro;
                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("textEspecial",13, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // textEspecial ::= DECIMAL 
            {
              Parameter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        String text = String.valueOf(f);
                        text = text.substring(1,text.length()-1);
                        Parameter parametro = new Parameter("int", text, cur_token.left+line, cur_token.right+column);
                        RESULT = parametro;
                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("textEspecial",13, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // textEspecial ::= IDVARIABLE 
            {
              Parameter RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
                        String text = String.valueOf(f);
                        Parameter parametro = new Parameter("variable",text, cur_token.left+line, cur_token.right+column);
                        RESULT =parametro;
                        
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("textEspecial",13, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ScriptParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ScriptParser$do_action(
    int                        CUP$ScriptParser$act_num,
    java_cup.runtime.lr_parser CUP$ScriptParser$parser,
    java.util.Stack            CUP$ScriptParser$stack,
    int                        CUP$ScriptParser$top)
    throws java.lang.Exception
    {
              return CUP$ScriptParser$do_action_part00000000(
                               CUP$ScriptParser$act_num,
                               CUP$ScriptParser$parser,
                               CUP$ScriptParser$stack,
                               CUP$ScriptParser$top);
    }
}

}
