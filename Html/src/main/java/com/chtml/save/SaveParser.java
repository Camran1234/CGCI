
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.chtml.save;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import com.chtml.table.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class SaveParser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return SaveSym.class;
}

  /** Default constructor. */
  @Deprecated
  public SaveParser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public SaveParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public SaveParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\003\000\002\003\002\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\014" +
    "\006\000\002\005\006\000\002\006\006\000\002\007\006" +
    "\000\002\010\006\000\002\011\006\000\002\012\006\000" +
    "\002\013\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\004\023\005\001\002\000\004\002\077\001" +
    "\002\000\004\005\006\001\002\000\010\002\ufffd\006\011" +
    "\007\010\001\002\000\004\002\000\001\002\000\026\003" +
    "\032\010\030\012\022\013\034\014\025\015\013\016\017" +
    "\017\012\020\021\024\020\001\002\000\004\002\ufffe\001" +
    "\002\000\004\004\074\001\002\000\004\004\071\001\002" +
    "\000\026\003\032\010\030\012\022\013\034\014\025\015" +
    "\013\016\017\017\012\020\021\024\020\001\002\000\026" +
    "\003\032\010\030\012\022\013\034\014\025\015\013\016" +
    "\017\017\012\020\021\024\020\001\002\000\026\003\032" +
    "\010\030\012\022\013\034\014\025\015\013\016\017\017" +
    "\012\020\021\024\020\001\002\000\004\004\063\001\002" +
    "\000\004\004\060\001\002\000\004\004\055\001\002\000" +
    "\004\004\052\001\002\000\026\003\032\010\030\012\022" +
    "\013\034\014\025\015\013\016\017\017\012\020\021\024" +
    "\020\001\002\000\010\002\ufffd\006\011\007\010\001\002" +
    "\000\004\004\045\001\002\000\026\003\032\010\030\012" +
    "\022\013\034\014\025\015\013\016\017\017\012\020\021" +
    "\024\020\001\002\000\026\003\032\010\030\012\022\013" +
    "\034\014\025\015\013\016\017\017\012\020\021\024\020" +
    "\001\002\000\010\002\ufff3\006\ufff3\007\ufff3\001\002\000" +
    "\026\003\032\010\030\012\022\013\034\014\025\015\013" +
    "\016\017\017\012\020\021\024\020\001\002\000\026\003" +
    "\032\010\030\012\022\013\034\014\025\015\013\016\017" +
    "\017\012\020\021\024\020\001\002\000\026\003\032\010" +
    "\030\012\022\013\034\014\025\015\013\016\017\017\012" +
    "\020\021\024\020\001\002\000\004\004\035\001\002\000" +
    "\004\021\036\001\002\000\004\011\037\001\002\000\026" +
    "\003\ufff0\010\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016" +
    "\ufff0\017\ufff0\020\ufff0\024\ufff0\001\002\000\010\002\ufff5" +
    "\006\ufff5\007\ufff5\001\002\000\010\002\ufff4\006\ufff4\007" +
    "\ufff4\001\002\000\010\002\ufffc\006\ufffc\007\ufffc\001\002" +
    "\000\010\002\ufffb\006\ufffb\007\ufffb\001\002\000\010\002" +
    "\ufffa\006\ufffa\007\ufffa\001\002\000\004\021\046\001\002" +
    "\000\004\011\047\001\002\000\026\003\uffef\010\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\024\uffef\001\002\000\004\002\uffff\001\002\000\010\002" +
    "\ufff8\006\ufff8\007\ufff8\001\002\000\004\022\053\001\002" +
    "\000\004\011\054\001\002\000\026\003\ufff1\010\ufff1\012" +
    "\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1\020\ufff1" +
    "\024\ufff1\001\002\000\004\022\056\001\002\000\004\011" +
    "\057\001\002\000\026\003\uffeb\010\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\024\uffeb\001" +
    "\002\000\004\022\061\001\002\000\004\011\062\001\002" +
    "\000\026\003\ufff2\010\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\017\ufff2\020\ufff2\024\ufff2\001\002\000\004" +
    "\022\064\001\002\000\004\011\065\001\002\000\026\003" +
    "\uffed\010\uffed\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed" +
    "\017\uffed\020\uffed\024\uffed\001\002\000\010\002\ufff6\006" +
    "\ufff6\007\ufff6\001\002\000\010\002\ufff7\006\ufff7\007\ufff7" +
    "\001\002\000\010\002\ufff9\006\ufff9\007\ufff9\001\002\000" +
    "\004\021\072\001\002\000\004\011\073\001\002\000\026" +
    "\003\uffee\010\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\024\uffee\001\002\000\004\022\075" +
    "\001\002\000\004\011\076\001\002\000\026\003\uffec\010" +
    "\uffec\012\uffec\013\uffec\014\uffec\015\uffec\016\uffec\017\uffec" +
    "\020\uffec\024\uffec\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\075\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\006\001\001\000\002\001\001" +
    "\000\024\004\023\005\030\006\025\007\013\010\022\011" +
    "\014\012\015\013\032\014\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\004\067\005" +
    "\030\006\025\007\013\010\022\011\014\012\015\013\032" +
    "\014\026\001\001\000\024\004\066\005\030\006\025\007" +
    "\013\010\022\011\014\012\015\013\032\014\026\001\001" +
    "\000\024\004\065\005\030\006\025\007\013\010\022\011" +
    "\014\012\015\013\032\014\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\004\050\005\030\006\025\007\013\010\022\011\014" +
    "\012\015\013\032\014\026\001\001\000\004\003\047\001" +
    "\001\000\002\001\001\000\024\004\043\005\030\006\025" +
    "\007\013\010\022\011\014\012\015\013\032\014\026\001" +
    "\001\000\024\004\042\005\030\006\025\007\013\010\022" +
    "\011\014\012\015\013\032\014\026\001\001\000\002\001" +
    "\001\000\024\004\041\005\030\006\025\007\013\010\022" +
    "\011\014\012\015\013\032\014\026\001\001\000\024\004" +
    "\040\005\030\006\025\007\013\010\022\011\014\012\015" +
    "\013\032\014\026\001\001\000\024\004\037\005\030\006" +
    "\025\007\013\010\022\011\014\012\015\013\032\014\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$SaveParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$SaveParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$SaveParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<HolderCaptcha> holder = new ArrayList();

    public ArrayList getCaptchas(){
        ArrayList<HolderCaptcha> reverse = new ArrayList();
        for(int index=holder.size()-1; index>=0; index--){
            reverse.add(holder.get(index));
        }
        return reverse;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$SaveParser$actions {
  private final SaveParser parser;

  /** Constructor */
  CUP$SaveParser$actions(SaveParser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$SaveParser$do_action_part00000000(
    int                        CUP$SaveParser$act_num,
    java_cup.runtime.lr_parser CUP$SaveParser$parser,
    java.util.Stack            CUP$SaveParser$stack,
    int                        CUP$SaveParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$SaveParser$result;

      /* select the action based on the action number */
      switch (CUP$SaveParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= flag EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		RESULT = start_val;
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$SaveParser$parser.done_parsing();
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // flag ::= DB OPEN_C s 
            {
              Object RESULT =null;

              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("flag",0, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-2)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= OPEN_B captcha s 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		HolderCaptcha f = (HolderCaptcha)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		holder.add(f);
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-2)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // s ::= CLOSE_C 
            {
              Object RESULT =null;

              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // s ::= 
            {
              Object RESULT =null;

              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("s",1, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // captcha ::= idH captcha 
            {
              HolderCaptcha RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).right;
		HolderCaptcha f = (HolderCaptcha)((java_cup.runtime.Symbol) CUP$SaveParser$stack.peek()).value;
		 f.setIdCaptcha(a); RESULT=f; 
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // captcha ::= nameH captcha 
            {
              HolderCaptcha RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).right;
		HolderCaptcha f = (HolderCaptcha)((java_cup.runtime.Symbol) CUP$SaveParser$stack.peek()).value;
		 f.setNameCaptcha(a); RESULT=f; 
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // captcha ::= intH captcha 
            {
              HolderCaptcha RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).right;
		HolderCaptcha f = (HolderCaptcha)((java_cup.runtime.Symbol) CUP$SaveParser$stack.peek()).value;
		 f.setIntentos(Integer.parseInt(a)); RESULT=f; 
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // captcha ::= aciertoH captcha 
            {
              HolderCaptcha RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).right;
		HolderCaptcha f = (HolderCaptcha)((java_cup.runtime.Symbol) CUP$SaveParser$stack.peek()).value;
		 f.setAceirtos(Integer.parseInt(a)); RESULT=f; 
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // captcha ::= falloH captcha 
            {
              HolderCaptcha RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).right;
		HolderCaptcha f = (HolderCaptcha)((java_cup.runtime.Symbol) CUP$SaveParser$stack.peek()).value;
		 f.setFallos(Integer.parseInt(a)); RESULT=f; 
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // captcha ::= dateH captcha 
            {
              HolderCaptcha RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).right;
		HolderCaptcha f = (HolderCaptcha)((java_cup.runtime.Symbol) CUP$SaveParser$stack.peek()).value;
		 f.setDate(a); RESULT=f; 
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // captcha ::= hrefH captcha 
            {
              HolderCaptcha RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).right;
		HolderCaptcha f = (HolderCaptcha)((java_cup.runtime.Symbol) CUP$SaveParser$stack.peek()).value;
		 f.setHref(a); RESULT=f; 
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // captcha ::= codeH captcha 
            {
              HolderCaptcha RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).right;
		HolderCaptcha f = (HolderCaptcha)((java_cup.runtime.Symbol) CUP$SaveParser$stack.peek()).value;
		 f.createData(a); RESULT=f; 
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // captcha ::= error captcha 
            {
              HolderCaptcha RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()).right;
		HolderCaptcha f = (HolderCaptcha)((java_cup.runtime.Symbol) CUP$SaveParser$stack.peek()).value;
		RESULT=f;
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // captcha ::= CLOSE_B 
            {
              HolderCaptcha RESULT =null;
		RESULT = new HolderCaptcha();
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("captcha",2, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nameH ::= NAME EQUAL STRING COLON 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		
            String text = String.valueOf(f);
            text = text.substring(1,text.length()-1);
            RESULT = text;
                    
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("nameH",10, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-3)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // idH ::= ID EQUAL STRING COLON 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		
            String text = String.valueOf(f);
            text = text.substring(1,text.length()-1);
            RESULT = text;
                    
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("idH",3, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-3)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // intH ::= INTENTO EQUAL NUMBER COLON 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		
            String text = String.valueOf(f);
            RESULT = text;
                    
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("intH",4, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-3)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // aciertoH ::= ACIERTO EQUAL NUMBER COLON 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		
            String text = String.valueOf(f);
            RESULT = text;
                    
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("aciertoH",5, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-3)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // falloH ::= FALLO EQUAL NUMBER COLON 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		
        String text = String.valueOf(f);
        RESULT =text;
        
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("falloH",6, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-3)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dateH ::= DATE EQUAL STRING COLON 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		
            String text = String.valueOf(f);
            text = text.substring(1,text.length()-1);
            RESULT = text;
                    
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("dateH",7, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-3)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // hrefH ::= HREF EQUAL STRING COLON 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		
            String text = String.valueOf(f);
            text = text.substring(1,text.length()-1);
            RESULT = text;
                    
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("hrefH",8, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-3)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // codeH ::= CODE EQUAL STRING COLON 
            {
              String RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-1)).value;
		
            String text = String.valueOf(f);
            text = text.substring(1,text.length()-1);
            RESULT = text;
                    
              CUP$SaveParser$result = parser.getSymbolFactory().newSymbol("codeH",9, ((java_cup.runtime.Symbol)CUP$SaveParser$stack.elementAt(CUP$SaveParser$top-3)), ((java_cup.runtime.Symbol)CUP$SaveParser$stack.peek()), RESULT);
            }
          return CUP$SaveParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$SaveParser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$SaveParser$do_action(
    int                        CUP$SaveParser$act_num,
    java_cup.runtime.lr_parser CUP$SaveParser$parser,
    java.util.Stack            CUP$SaveParser$stack,
    int                        CUP$SaveParser$top)
    throws java.lang.Exception
    {
              return CUP$SaveParser$do_action_part00000000(
                               CUP$SaveParser$act_num,
                               CUP$SaveParser$parser,
                               CUP$SaveParser$stack,
                               CUP$SaveParser$top);
    }
}

}
